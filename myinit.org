
* About 

This is my emacs init.el file written in org-mode. Everything in here
is loaded by org-babel-load-file in the actual init.el, which then
takes out all source blocks, creates a myinit.el file, which is executed.


* Install packages

First of all we want to make sure we have all packages installed. Thus
using use-package and a list of packages we currently use, install
them:

#+BEGIN_SRC emacs-lisp
(require 'use-package)
(setq use-package-always-ensure t)

(setq my-packages '(htmlize
                    which-key 
                    ob-nim 
                    org 
                    org-ac 
                    ein 
                    nim-mode 
                    pixie-mode 
                    undo-tree 
                    magit 
                    gnuplot-mode 
                    hy-mode 
                    smartparens 
                    cider 
                    clojure-mode 
                    yasnippet 
                    wgrep-helm 
                    spacemacs-theme 
                    spaceline 
                    smart-mode-line-powerline-theme 
                    rainbow-delimiters 
                    monokai-theme 
                    julia-mode 
                    go-mode 
                    go-autocomplete 
                    edit-server 
                    auto-complete-exuberant-ctags 
                    auctex 
                    aggressive-indent 
                    ac-helm 
                    ac-etags))
#+END_SRC

Iterate over all packages and call use-package with it:
#+BEGIN_SRC emacs-lisp
(dolist (p my-packages) 
  (when (not (package-installed-p p))
    (package-install p)))
#+END_SRC


* Interface and general emacs settings

This part contains settings, which are related to the user interface,
i.e. line numbering and also some general settings, we don't or do want.

#+BEGIN_SRC emacs-lisp
;; enable line and column numbering at bottom right of buffer
(setq line-number-mode t
      column-number-mode t)

;; disable tabs as indentation (spaces only)
(setq-default indent-tabs-mode nil)

;; disable upcase region
(put 'upcase-region 'disabled nil)

;; activate true fullscreen mode
;; old way to activate full screen
;; (defun fullscreen ()
;;        (interactive)
;;        (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
;;                               '(2 "_NET_WM_STATE_FULLSCREEN" 0)))

(defun toggle-fullscreen ()
  "Toggle full screen on X11"
  (interactive)
  (when (eq window-system 'x)
    (set-frame-parameter
     nil 'fullscreen
     (when (not (frame-parameter nil 'fullscreen)) 'fullboth))))
(global-set-key [f11] 'toggle-fullscreen)

;; always show full path to file in title bar
(setq frame-title-format
      (list (format "%s %%S: %%j " (system-name))
            '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))

;;(set-face-attribute 'mode-line nil
;;                      :foreground "Black"
;;                      :background "DarkOrange"
;;                     :box nil)

#+END_SRC


Emacs shall start an edit-server, in case none was started yet, so we
can e.g. access emacs from Chrome (for editing text fields):
#+BEGIN_SRC emacs-lisp
(require 'edit-server)
(edit-server-start)
#+END_SRC


We want to use auto-complete via ac all the time, so activate that:
#+BEGIN_SRC emacs-lisp
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/lisp/ac-dict")
(ac-config-default)
;; and enable auto completion for etags
(eval-after-load "etags"
  '(progn
      (ac-etags-setup)))
#+END_SRC


Set up ssh to be used by tramp as default, instead of scp. This is
much more performant.
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC


Add ./lisp folder to load-path
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp")    ; This may not be appeared if you have already added.
#+END_SRC

The following contains the settings related to themes.
#+BEGIN_SRC emacs-lisp

;; powerline related
;; (setq powerline-arrow-shape 'curve)
;; (setq powerline-default-separator-dir '(right . left))
;; ;; These two lines you really need.
;; (setq sml/theme 'respectful)
;; (sml/setup)

;; load spacemacs theme
;;(load-theme 'spacemacs-dark t)

;; load the spaceline modeline theme
(require 'spaceline-config)
(spaceline-emacs-theme)

;; fix broken colors in powerline
(setq ns-use-srgb-colorspace nil)
(setq powerline-default-separator 'utf-8)

(load-theme 'monokai t)

;; disable menu and tool bar
(menu-bar-mode -1)
(tool-bar-mode -1)

#+END_SRC

Some more general settings for some modes:

Enable auto-fill-mode for every text buffer automatically.
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC


* TeX related settings
This part contains settings related to LaTeX. Most TeX related
settings can be found in the custom.el, because they are written
automatically by emacs (AucTeX)
#+BEGIN_SRC emacs-lisp
;; load auctex
;; (load "auctex.el" nil t t)
;(load "preview-latex.el" nil t t)
;; set auctex to PDF mode (uses pdflatex)
(setq TeX-PDF-mode t)
#+END_SRC

And activate rainbow-delimiters for LaTeX code:
#+BEGIN_SRC emacs-lisp
(add-hook 'TeX-mode-hook #'rainbow-delimiters-mode)
#+END_SRC


* Helm

Helm. Really an emacs package in a league of its own:
https://tuhdo.github.io/helm-intro.html

#+BEGIN_SRC emacs-lisp
(require 'helm)
(require 'helm-config)
#+END_SRC

The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
Changed to "C-c h". Note: We must set "C-c h" globally, because we
cannot change `helm-command-prefix-key' once `helm-config' is loaded.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c h") 'helm-command-prefix)
; (global-unset-key (kbd "C-x c")
;; instead of using standard M-x, use helm-M-x instead
(global-set-key (kbd "M-x") 'helm-M-x)
;; instead of using standard kill ring, use helm show kill ring
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
;; use helm-mini as buffer selection (can use regexps etc!)
(global-set-key (kbd "C-x b") 'helm-mini)
;; and enable fuzzy matching for it
(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)
;; use helm to find files as well
(global-set-key (kbd "C-x C-f") 'helm-find-files)
;; change key binding for helm occur
(global-set-key (kbd "C-c h o") 'helm-occur)
(global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
#+END_SRC


Activate helm for autocomplete and set keys.
#+BEGIN_SRC emacs-lisp
(require 'ac-helm)  ;; Not necessary if using ELPA package
(global-set-key (kbd "C-;") 'ac-complete-with-helm)
(define-key ac-complete-mode-map (kbd "C-;") 'ac-complete-with-helm)
#+END_SRC

define tab as helm execute persitent action (i.e. during file search
select highlighted, similar to tab completion in those cases)
#+BEGIN_SRC emacs-lisp
(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i")   'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-z")   'helm-select-action) ; list actions using C-z
#+END_SRC

Enable fuzzy mode for semantic
#+BEGIN_SRC emacs-lisp
(setq helm-semantic-fuzzy-match t
      helm-imenu-fuzzy-match    t)
#+END_SRC

Activate auto resizing of helm window
#+BEGIN_SRC emacs-lisp
(helm-autoresize-mode t)
(helm-mode 1)
#+END_SRC

Set helm-complete-filename-at-point to 'Alt+\', which can be used to
expand a filename given at point to its full system path. Really
useful in cases where one suddenly wants the full path from the
current relative path given.
#+BEGIN_SRC emacs-lisp
(global-set-key "\M-\\" 'helm-complete-file-name-at-point)
#+END_SRC

* Org mode


#+BEGIN_SRC emacs-lisp
(require 'org)
#+END_SRC

Increase size of latex formulas preview in org-mode
#+BEGIN_SRC emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+END_SRC

When exporting org tables to LaTeX, we want the caption to be placed
below the table, instead of above.
#+BEGIN_SRC emacs-lisp
(setq org-latex-caption-above nil)
#+END_SRC

We want to default org-mode to the indented style.
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC

Load source code support for org mode for some so far used languages.
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (C . t)
   (sh . t)))
#+END_SRC

Fontify source blocks (enable syntax highlighting of source code)
and set indentation to normal source code indentation
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil
      org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-src-preserve-indentation t)
#+END_SRC


Define additional org mode faces
#+BEGIN_SRC emacs-lisp
(setq org-todo-keyword-faces
      '(
        ("STARTED" . (:foreground "purple" :weight bold))
        ("WAITING" . (:foreground "yellow" :weight bold))
        ("MAYBE" . (:foreground "orange" :weight bold))
        ))

(setq org-todo-keywords
      '((sequence "TODO" "STARTED" "WAITING" "MAYBE" "DONE")))
#+END_SRC


Add some files to org-agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/org/day_to_day.org"))
(setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
#+END_SRC


The following could also be placed in the interface part, but since
it's related to org-mode, it's here. Used to change the sizes of the
headings in an org-mode file, to reduce the sizes slightly
#+BEGIN_SRC emacs-lisp
;; change sizes of headings in monokai theme for org-mode
(setq monokai-height-minus-1 0.7
      monokai-height-plus-1 0.8
      monokai-height-plus-2 0.85
      monokai-height-plus-3 0.9
      monokai-height-plus-4 0.95)

;; the following are the defaults
;; (setq monokai-height-minus-1 0.8
;;       monokai-height-plus-1 1.1
;;       monokai-height-plus-2 1.15
;;       monokai-height-plus-3 1.2
;;       monokai-height-plus-4 1.3)

#+END_SRC


** Export settings
These settings are specifically related to exporting org-mode files to
HTML, LaTeX etc.

Note: following currently not in use. Added to header of org file
instead, since the following doesn't work. FIXIT
Include siunitx by default for LaTeX fragments:
#+BEGIN_SRC emacs-lisp
;; (setq org-format-latex-header (plist-put org-format-latex-header "\\usepackage{siunitx}"))
#+END_SRC

Set HTML export such that it can work with siunitx:
#+BEGIN_SRC emacs-lisp
;; modify path and mathml
(setq org-html-mathjax-options
  '((path "http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML")
    (scale "100")
    (align "center")
    (indent "2em")
    (mathml t)))

(setq org-html-mathjax-template
              "
<script type=\"text/javascript\" src=\"%PATH\"></script>
<script type=\"text/javascript\">
<!--/*--><![CDATA[/*><!--*/
    MathJax.Hub.Config({
        jax: [\"input/TeX\", \"output/HTML-CSS\"],
        extensions: [\"tex2jax.js\",\"TeX/AMSmath.js\",\"TeX/AMSsymbols.js\",
                     \"TeX/noUndefined.js\", \"[Contrib]/siunitx/siunitx.js\", \"[Contrib]/mhchem/mhchem.js\"],
        tex2jax: {
            inlineMath: [ [\"\\\\(\",\"\\\\)\"] ],
            displayMath: [ ['$$','$$'], [\"\\\\[\",\"\\\\]\"], [\"\\\\begin{displaymath}\",\"\\\\end{displaymath}\"] ],
            skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"pre\",\"code\"],
            ignoreClass: \"tex2jax_ignore\",
            processEscapes: false,
            processEnvironments: true,
            preview: \"TeX\"
        },
        TeX: {extensions: [\"AMSmath.js\",\"AMSsymbols.js\",  \"[Contrib]/siunitx/siunitx.js\", \"[Contrib]/mhchem/mhchem.js\"]},
        showProcessingMessages: true,
        displayAlign: \"%ALIGN\",
        displayIndent: \"%INDENT\",

        \"HTML-CSS\": {
             scale: %SCALE,
             availableFonts: [\"STIX\",\"TeX\"],
             preferredFont: \"TeX\",
             webFont: \"TeX\",
             imageFont: \"TeX\",
             showMathMenu: true,
        },
        MMLorHTML: {
             prefer: {
                 MSIE:    \"MML\",
                 Firefox: \"MML\",
                 Opera:   \"HTML\",
                 other:   \"HTML\"
             }
        }
    });
/*]]>*///-->
</script>")
#+END_SRC


* Programming languages

This section contains settings, which are related to different
programming languages.

In general we want to be able to create a TAGS file for a
project. Define a function to use exuberant-tags:

#+BEGIN_SRC emacs-lisp
;; create tags file from within emacs
;; first set path to ctags
(setq path-to-ctags "/usr/local/bin/ctags")
;; define function which creates tag file
(defun create-tags (dir-name)
  "Create tags file."
  ;; ask user for directory to scan
  (interactive "DDirectory: ")
  ;; create a help variable for input directory + TAGS
  ;; as in output path for TAGS file
  ; for some reason the following line didn't work anymore
  ;(setq local-tags-filename (concat 'string (directory-file-name dir-name) "/TAGS"))
  (setq local-tags-filename (concat (directory-file-name dir-name) "/TAGS"))
  ;; run shell command
  (shell-command
   (format "%s -f %s -e -R --verbose --fields='+afikKlmnsSzt' %s" path-to-ctags local-tags-filename (directory-file-name dir-name)))
  ;; and visit the new TAGS file
  (visit-tags-table local-tags-filename)
)
#+END_SRC


** Emacs Lisp

Activate some hooks for Emacs lisp. Rainbow mode is essential for the paranthesis.

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

** C / C++

For C and C++ we wish to use the python style of indentation, with 4
spaces.

#+BEGIN_SRC emacs-lisp
(setq c-default-style "python"
       c-basic-offset 4
       tab-width 4)
;; indent cases to the same level as c-indent-level
(c-set-offset 'case-label '+)
#+END_SRC 

And also some hooks for C. 
#+BEGIN_SRC emacs-lisp
(add-hook 'c++-mode-hook #'rainbow-delimiters-mode)
(add-hook 'c++-mode-hook #'subword-mode)
#+END_SRC

Enable subword mode automatically (camelCaseWord will be treated as
individual words for M-f and M-b etc.)  can be switched on or off by
C-c C-w in cc-mode!
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook
          (lambda () (subword-mode 1)))
#+END_SRC

And add for CC-mode for auto complete with etags. The
c-mode-common-hook is a common hook, which is loaded for all language
hooks, which derive from CC-mode, which is quite a lot (c-mode,
c++-mode, and a few others)
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook 'ac-etags-ac-setup)
#+END_SRC

** Python

Some sensible settings for Python. Activating python-mode per default
for all python filename extensions. 

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
(add-to-list 'auto-mode-alist '("\\.pyx\\'" . python-mode))
#+END_SRC

And some hooks for easier visuals and movement in a python
buffer. Smartparens mode is currently not used, because too often it
is more annoying in python than helpful. 

#+BEGIN_SRC emacs-lisp
;; (add-hook 'python-mode-hook #'smartparens-strict-mode)
;; (add-hook 'python-mode-hook #'smartparens-mode)
(add-hook 'python-mode-hook #'rainbow-delimiters-mode)
(add-hook 'python-mode-hook #'subword-mode)
#+END_SRC

Set ipython as python shell
#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i")
(setenv "IPY_TEST_SIMPLE_PROMPT" "1")
#+END_SRC


** Clojure

The following contains the settings used for Clojure, a Lisp which
runs on the JVM.

Clojure related settings Enabling CamelCase support for editing
commands(like forward-word, backward-word, etc) in clojure-mode is
quite useful since we often have to deal with Java class and method
names. The built-in Emacs minor mode subword-mode provides such
functionality:
#+BEGIN_SRC emacs-lisp
(add-hook 'clojure-mode-hook #'subword-mode)
#+END_SRC

The use of paredit when editing Clojure (or any other Lisp) code is
highly recommended. It helps ensure the structure of your forms is
not compromised and offers a number of operations that work on code
structure at a higher level than just characters and words. To
enable it for Clojure buffers:
(add-hook 'clojure-mode-hook #'paredit-mode)
smartparens is an excellent (newer) alternative to paredit. Many
Clojure hackers have adopted it recently and you might want to give
it a try as well. To enable smartparens use the following code:
#+BEGIN_SRC 
(add-hook 'clojure-mode-hook #'smartparens-strict-mode)
#+END_SRC

RainbowDelimiters is a minor mode which highlights parentheses,
brackets, and braces according to their depth. Each successive
level is highlighted in a different color. This makes it easy to
spot matching delimiters, orient yourself in the code, and tell
which statements are at a given depth. Assuming you've already
installed RainbowDelimiters you can enable it like this:
#+BEGIN_SRC emacs-lisp
(add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

aggressive-indent-mode automatically adjust the indentation of your
code, while you're writing it. Using it together with clojure-mode
is highly recommended. Provided you've already installed
aggressive-indent-mode you can enable it like this:
#+BEGIN_SRC emacs-lisp
(add-hook 'clojure-mode-hook #'aggressive-indent-mode)
#+END_SRC

And finally the same hooks for the CIDER REPL:
#+BEGIN_SRC emacs-lisp
(add-hook 'cider-repl-mode-hook #'aggressive-indent-mode)
(add-hook 'cider-repl-mode-hook #'smartparens-mode)
(add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode)
(add-hook 'cider-repl-mode-hook #'subword-mode)
(eval-after-load "Clojure"
  (require 'smartparens-config)
  )
#+END_SRC


** Nim

Hooks and settings for Nim lang, a sweet

#+BEGIN_SRC emacs-lisp
(add-hook 'nim-mode-hook #'rainbow-delimiters-mode)
(add-hook 'nim-mode-hook #'subword-mode)
#+END_SRC

** Julia

Add the standard hooks for Julia as well, a JIT compiled language,
which strifes for success in the scientific community.
#+BEGIN_SRC emacs-lisp
(add-hook 'julia-mode-hook #'rainbow-delimiters-mode)
(add-hook 'julia-mode-hook #'subword-mode)
#+END_SRC

** Hy

Some useful settings for Hy, a weird Lisp which compiles to Python
bytecode.

#+BEGIN_SRC emacs-lisp
(add-hook 'hy-mode-hook #'smartparens-strict-mode)
(add-hook 'hy-mode-hook #'rainbow-delimiters-mode)
(add-hook 'hy-mode-hook #'subword-mode)
#+END_SRC


** Pixie

Another interesting Lisp, takes Clojure as its inspiration, but tries
to be a super compact Lisp. 
#+BEGIN_SRC emacs-lisp
;; add REPL for pixie mode, using clojure defaults
(add-hook 'pixie-mode-hook #'inf-clojure-minor-mode)
#+END_SRC

