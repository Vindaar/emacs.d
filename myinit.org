
* About


This is my emacs init.el file written in org-mode. Everything in here
is loaded by org-babel-load-file in the actual init.el, which then
takes out all source blocks, creates a myinit.el file, which is executed.


* Install packages

First of all we want to make sure we have all packages installed. Thus
using use-package and a list of packages we currently use, install
them:

#+BEGIN_SRC emacs-lisp
(require 'use-package)
(setq use-package-always-ensure t)

(setq my-packages '(htmlize
                    which-key
                    ob-nim
                    ;;org
                    ;;org-ac
                    ;;ein
                    nim-mode
                    ;; pixie-mode
                    undo-tree
                    magit
                    gnuplot-mode
                    ;; hy-mode
                    smartparens
                    ;;cider
                    clojure-mode
                    yasnippet
                    wgrep-helm
                    ;;spacemacs-theme
                    spaceline
                    ;; smart-mode-line-powerline-theme
                    rainbow-delimiters
                    monokai-theme
                    julia-mode
                    go-mode
                    go-autocomplete
                    edit-server
                    auto-complete-exuberant-ctags
                    auctex
                    aggressive-indent
                    ac-helm
                    ac-etags
                    avy
                    swiper
                    transpose-frame
                    ;; poet-theme
                    ;; olivetti
                    typo
                    mozc
                    web-mode ;; to program HTML templates
                    yaml-mode
                    ;;xah-math-input
                    org-ref
                    helm-bibtex
                    helm-org
                    helm-org-rifle
                    ;;dumb-jump
                    casual
                    ))
#+END_SRC

Iterate over all packages and call use-package with it:
#+BEGIN_SRC emacs-lisp
(dolist (p my-packages)
  (if (not (package-installed-p p))
    (progn 
      (message "Installing %s" p)
      (package-install p))
    (message "Already installed %s" p)))
#+END_SRC


* Interface and general emacs settings

This part contains settings, which are related to the user interface,
i.e. line numbering and also some general settings, we don't or do want.

#+BEGIN_SRC emacs-lisp
;; disable the startup screen
(setq inhibit-startup-screen t)

;; enable line and column numbering at bottom right of buffer
(setq line-number-mode t
      column-number-mode t)

;; disable tabs as indentation (spaces only)
(setq-default indent-tabs-mode nil)

;; disable upcase region
(put 'upcase-region 'disabled nil)

;; activate true fullscreen mode
;; old way to activate full screen
;; (defun fullscreen ()
;;        (interactive)
;;        (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
;;                               '(2 "_NET_WM_STATE_FULLSCREEN" 0)))

(defun toggle-fullscreen ()
  "Toggle full screen on X11"
  (interactive)
  (when (eq window-system 'x)
    (set-frame-parameter
     nil 'fullscreen
     (when (not (frame-parameter nil 'fullscreen)) 'fullboth))))
(global-set-key [f11] 'toggle-fullscreen)

;; always show full path to file in title bar
(setq frame-title-format
      (list (format "%s %%S: %%j " (system-name))
            '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))

;;(set-face-attribute 'mode-line nil
;;                      :foreground "Black"
;;                      :background "DarkOrange"
;;                     :box nil)

#+END_SRC

Start an Emacs daemon:
#+begin_src emacs-lisp
(server-start)
#+end_src

Emacs shall start an edit-server, in case none was started yet, so we
can e.g. access emacs from Chrome (for editing text fields):
-> *UPDATE* <2024-07-10 Wed 12:37>: As of now we don't actually really
use this anymore. Maybe we will again in the future, who knows.
#+BEGIN_SRC emacs-lisp
;; (require 'edit-server)
;; (edit-server-start)
#+END_SRC


We want to use auto-complete via ac all the time, so activate that:
#+BEGIN_SRC emacs-lisp
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/lisp/ac-dict")
(ac-config-default)
;; and enable auto completion for etags
(eval-after-load "etags"
  '(progn
      (ac-etags-setup)))
#+END_SRC


Set up ssh to be used by tramp as default, instead of scp. This is
much more performant.
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC


Add ./lisp folder to load-path
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp")    ; This may not be appeared if you have already added.
#+END_SRC

The following contains the settings related to themes.
#+BEGIN_SRC emacs-lisp

;; powerline related
;; (setq powerline-arrow-shape 'curve)
;; (setq powerline-default-separator-dir '(right . left))
;; ;; These two lines you really need.
;; (setq sml/theme 'respectful)
;; (setq sml/theme 'powerline)
;; (sml/setup)

;; load spacemacs theme
;;(load-theme 'spacemacs-dark t)

;; load the spaceline modeline theme
(require 'spaceline-config)
(spaceline-emacs-theme)

;; fix broken colors in powerline
;; (setq ns-use-srgb-colorspace nil)
;; (setq powerline-default-separator 'utf-8)

(load-theme 'monokai t)

;; disable menu, tool bar and scroll-bar
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

Change the default font to Inconsolata:
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist
             '(font . "Inconsolata-12"))
(set-face-attribute 'default t :font "Inconsolata-12" )
(set-frame-font "Inconsolata-12")
#+END_SRC

Some more general settings for some modes:

Enable auto-fill-mode for every text buffer automatically.
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

Set the regex builder syntax from 'read' to 'string' so that we don't
have to use double backslash.
#+BEGIN_SRC emacs-lisp
(setq reb-re-syntax 'string)
(setq reb-re-syntax 'read)
#+END_SRC


Exchange isearch with swiper and set a couple of settings (taken from
the config example https://github.com/abo-abo/swiper).
#+BEGIN_SRC emacs-lisp
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
(global-set-key (kbd "C-s") 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
#+END_SRC

Set some avy-mode keybindings.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-:") 'avy-goto-char)
(global-set-key (kbd "C-'") 'avy-goto-char-2)
(global-set-key (kbd "M-g w") 'avy-goto-word-1)
(global-set-key (kbd "M-g e") 'avy-goto-word-0)
#+END_SRC

Set a keybinding for transpose-frame to switch from a vertical to a
horizontal split or vice versa:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x |") 'transpose-frame)
#+END_SRC

Add global hook to always remove trailing whitespaces in buffers upon
saving them. Note: in some cases, e.g. Markdown this might not be
desired, since a double whitespace at the end of a line has special
meaning?
Thus, define function derived from =delete-trailing-whitespace=, which
checks for the current major mode.
#+BEGIN_SRC emacs-lisp
(defun delete-trailing-whitespace-no-org-mode ()
  (when (not (eq major-mode 'org-mode))
    (delete-trailing-whitespace)))
#+END_SRC
Now add the custom hook.
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace-no-org-mode)
#+END_SRC

Change the keybinding for =other-window= and define a =prev-window=
command:
#+BEGIN_SRC emacs-lisp
(defun prev-window ()
  (interactive)
  (other-window -1))
#+END_SRC
And define the window moving commands
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-.") #'other-window)
(global-set-key (kbd "C-,") #'prev-window)
#+END_SRC

Set cycle-spacing to M-Spc to get rid of many spaces at once:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-SPC") #'cycle-spacing)
#+END_SRC

Set some bindings to make move to beginning / end of buffer work with
neo2:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-–") #'beginning-of-buffer)
(global-set-key (kbd "M-•") #'end-of-buffer)
#+END_SRC

Finally set a keybinding for =undo= to have it on the same physical
keys:
#+BEGIN_SRC emacs-lisp
(bind-key* "C-j" 'undo)
#+END_SRC

Activate =xah-math-mode= globally and change it's default key binding:
#+begin_src emacs-lisp
;; (require 'xah-math-input)
;; (global-xah-math-input-mode 1)
;; (define-key xah-math-input-keymap (kbd "S-SPC") nil) ; unset Shift+space 
;; (define-key xah-math-input-keymap (kbd "s-i") 'xah-math-input-change-to-symbol)
;;(global-xah-math-input-mode nil)
#+end_src

Smooth scrolling from emacs 29.1!
#+begin_src emacs-lisp
(pixel-scroll-precision-mode t)
#+end_src

Disable the behavior of ~C-z~. Ever since switching to the neo layout
I hit C-z way too often (next to p!). This seems like an elegant
solution:

https://stackoverflow.com/questions/28202546/hitting-ctrl-z-in-emacs-freezes-everything
#+begin_src emacs-lisp
(defun my-suspend-frame ()
  "In a GUI environment, do nothing; otherwise `suspend-frame'."
  (interactive)
  (if (display-graphic-p)
      (message "suspend-frame disabled for graphical displays.")
    (suspend-frame)))

(global-unset-key (kbd "C-z"))
(global-set-key (kbd "C-z") 'my-suspend-frame)
#+end_src

Enable yanking of the PRIMARY buffer via the middle mouse button in
~emacs~calc~ (i.e. to copy via mark and paste into calc!)
#+begin_src emacs-lisp
(setq select-enable-primary t)
#+end_src

Change the number of messages stored in the ~*Messages*~ buffer
(default is only 1000).
#+begin_src emacs-lisp
(setq message-log-max 100000)
#+end_src

** Expansion

Use =hippie-expand= for expansion by default:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-/") #'hippie-expand)
#+END_SRC

** Window splitting

Change the definition of =split-window-sensibly= to prefer a vertial
over a horizontal split. Function is defined in =window.el=. Use our
definition instead:
#+BEGIN_SRC emacs-lisp
(defun my-split-window-sensibly (&optional window)
  "Custom variant of split-window-sensibly, which prefers to split the
   windows vertically instead of horizontally"
  (let ((window (or window (selected-window))))
    (or (and (window-splittable-p window t)
             ;; Split window vertically.
             (with-selected-window window
           (split-window-right)))
        (and (window-splittable-p window)
             ;; Split window horizontally.
             (with-selected-window window
               (split-window-below)))
        (and
         ;; If WINDOW is the only usable window on its frame (it is
         ;; the only one or, not being the only one, all the other
         ;; ones are dedicated) and is not the minibuffer window, try
         ;; to split it vertically disregarding the value of
         ;; `split-height-threshold'.
         (let ((frame (window-frame window)))
           (or
            (eq window (frame-root-window frame))
            (catch 'done
              (walk-window-tree (lambda (w)
                                  (unless (or (eq w window)
                                              (window-dedicated-p w))
                                    (throw 'done nil)))
                                frame)
              t)))
         (not (window-minibuffer-p window))
         (let ((split-height-threshold 0))
           (when (window-splittable-p window)
             (with-selected-window window
               (split-window-below))))))))
#+END_SRC

And now choose it for the window spliting function:
#+BEGIN_SRC emacs-lisp
(setq split-window-preferred-function 'my-split-window-sensibly)
#+END_SRC


** XMonad specific settings

Set the emacs exec-path to the normal PATH variable.
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (getenv "PATH"))
#+END_SRC


** Unicode

Change how the character 'θ' is displayed in emacs. By default if we
use Inconsolata both 'ϑ' and 'θ' appear to use the same character,
which is pretty annoying.

The number '952' is the decimal representation of the unicode code
point of the character. To get it, call =describe-char= on the
character. That brings up all sorts of information about the
character, including hexadecimal and decimal numbers (decimal under 'decomposition').
#+begin_src emacs-lisp
;; (set-fontset-font "fontset-default" '(952 . 952)
;;                   (font-spec :register "CMU")
;;                   nil 'prepend)
#+end_src

*UPDATE*: <2024-08-06 Tue 10:29> The above is now unnecessary, because
we use STIX Two for both greek and mathematical scripts. See the next section.

** Adjusting font for some scripts

When looking at the output of ~describe-char~ we can see what "script"
a character belongs to. On one of my computers I had the issue that 𝔽
was being included in the document with excessive vertical
spacing. The ~script~ in the output below tells us what script we
might want to adjust and we can see that the character is being
displayed using Latin Modern Math.

#+begin_quote
             position: 4729 of 12213 (39%), column: 59
            character: 𝔽 (displayed as 𝔽) (codepoint 120125, #o352475, #x1d53d)
              charset: unicode (Unicode (ISO10646))
code point in charset: 0x1D53D
               script: mathematical
               syntax: w     which means: word
             category: .:Base, L:Strong L2R
             to input: type "C-x 8 RET 1d53d" or "C-x 8 RET MATHEMATICAL DOUBLE-STRUCK CAPITAL F"
          buffer code: #xF0 #x9D #x94 #xBD
            file code: #xF0 #x9D #x94 #xBD (encoded by coding system utf-8-unix)
              display: by this font (glyph code):
    ftcrhb:-PfEd-Latin Modern Math-regular-normal-normal-*-16-*-*-*-*-0-iso10646-1 (#x1B)

Character code properties: customize what to show
  name: MATHEMATICAL DOUBLE-STRUCK CAPITAL F
  general-category: Lu (Letter, Uppercase)
  decomposition: (font 70) (font 'F')

There are text properties here:
  face                 font-lock-comment-face
  fontified            t

[back]
#+end_quote

We now use STIX Two for both greek and mathematical script, which also
makes redundant the specific ϑ vs θ change from the previous section!
#+begin_src emacs-lisp
(set-fontset-font t 'mathematical (font-spec :family "STIX Two Math"))
(set-fontset-font t 'greek (font-spec :family "STIX Two Math"))
#+end_src


* TeX related settings
This part contains settings related to LaTeX. Most TeX related
settings can be found in the custom.el, because they are written
automatically by emacs (AucTeX)
#+BEGIN_SRC emacs-lisp
;; load auctex
;; (load "auctex.el" nil t t)
;(load "preview-latex.el" nil t t)
;; set auctex to PDF mode (uses pdflatex)
(setq TeX-PDF-mode t)
#+END_SRC

And activate rainbow-delimiters for LaTeX code:
#+BEGIN_SRC emacs-lisp
(add-hook 'TeX-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

Use =xelatex= by default:
#+begin_src emacs-lisp
(setq-default TeX-engine 'xetex)
#+end_src

And make sure ghostscript path is correct:
#+begin_src emacs-lisp
(setq preview-gs-command "/bin/gs")
#+end_src

Change the =org-preview-latex-process-alist= to use =xelatex= as well
and the DVI -> SVG backend.

*NOTE*: We use =xelatex= instead of =lualatex= here, as that way we
 can use =dvisvgm= with =xdv= file input. We could maybe also use
 =dvilualatex= as a compiler and use regular =dvi= as input, but this
 way works well (we still use =lualatex= for regular compilation of documents).
#+begin_src emacs-lisp
;;(setq org-preview-latex-process-alist
;;      '((dvipng :programs
;;                ("xelatex" "dvipng")
;;                :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "xdv" :image-output-type "png" :image-size-adjust
;;                (1.0 . 1.0)
;;                :latex-compiler
;;                ("xelatex --shell-escape -no-pdf -interaction nonstopmode -output-directory %o %f")
;;                :image-converter
;;                ("dvipng -D %D -T tight -o %O %f"))
;;        (dvisvgm :programs
;;                 ("xelatex" "dvisvgm")
;;                 :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :image-input-type "xdv" :image-output-type "svg" :image-size-adjust
;;                 (1.7 . 1.5)
;;                 :latex-compiler
;;                 ("xelatex --shell-escape -no-pdf -interaction nonstopmode -output-directory %o %f")
;;                 :image-converter
;;                 ("dvisvgm %f -n -b min -c %S -o %O"))
;;        (imagemagick :programs
;;                     ("xelatex" "convert")
;;                     :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :image-input-type "pdf" :image-output-type "png" :image-size-adjust
;;                     (1.0 . 1.0)
;;                     :latex-compiler
;;                     ("xelatex --shell-escape -no-pdf -interaction nonstopmode -output-directory %o %f")
;;                     :image-converter
;;                     ("convert -density %D -trim -antialias %f -quality 100 %O"))))
;; (setq org-preview-latex-default-process 'dvisvgm)

;; (setq org-latex-preview-process-alist 
;;       '((dvipng :programs
;;                 ("xelatex" "dvipng")
;;                 :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "xdv" :image-output-type "png" :image-size-adjust
;;                 (1.0 . 1.0)
;;                 :latex-compiler
;;                 ("xelatex --shell-escape -no-pdf -interaction nonstopmode -output-directory %o %f")
;;                 :image-converter
;;                 ("dvipng -D %D -T tight -o %O %f"))
;;         (dvisvgm :programs
;;                  ("xelatex" "dvisvgm")
;;                  :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :image-input-type "xdv" :image-output-type "svg" :image-size-adjust
;;                  (1.7 . 1.5)
;;                  :latex-compiler
;;                  ("xelatex --shell-escape -no-pdf -interaction nonstopmode -output-directory %o %f")
;;                  :image-converter
;;                  ("dvisvgm %f -n -b min -c %S -o %O"))
;;         (imagemagick :programs
;;                      ("xelatex" "convert")
;;                      :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :image-input-type "pdf" :image-output-type "png" :image-size-adjust
;;                      (1.0 . 1.0)
;;                      :latex-compiler
;;                      ("xelatex --shell-escape -no-pdf -interaction nonstopmode -output-directory %o %f")
;;                      :image-converter
;;                      ("convert -density %D -trim -antialias %f -quality 100 %O"))))
;; 
;; ;; For the new preview:
;; (setq org-latex-preview-process-default 'dvisvgm)
#+end_src

* Helm

Helm. Really an emacs package in a league of its own:
https://tuhdo.github.io/helm-intro.html

#+BEGIN_SRC emacs-lisp
(require 'helm)
;;(require 'helm-config)
#+END_SRC

The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
Changed to "C-c h". Note: We must set "C-c h" globally, because we
cannot change `helm-command-prefix-key' once `helm-config' is loaded.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c h") 'helm-command-prefix)
;; (global-unset-key (kbd "C-x c"))
;; instead of using standard M-x, use helm-M-x instead
(global-set-key (kbd "M-x") 'helm-M-x)
;; instead of using standard kill ring, use helm show kill ring
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
;; use helm-mini as buffer selection (can use regexps etc!)
(global-set-key (kbd "C-x b") 'helm-mini)
;; and enable fuzzy matching for it
(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)
;; use helm to find files as well
(global-set-key (kbd "C-x C-f") 'helm-find-files)
;; change key binding for helm occur
(global-set-key (kbd "C-c h o") 'helm-occur)
(global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
#+END_SRC


Activate helm for autocomplete and set keys.
#+BEGIN_SRC emacs-lisp
(require 'ac-helm)  ;; Not necessary if using ELPA package
(global-set-key (kbd "C-;") 'ac-complete-with-helm)
(define-key ac-complete-mode-map (kbd "C-;") 'ac-complete-with-helm)
#+END_SRC

define tab as helm execute persitent action (i.e. during file search
select highlighted, similar to tab completion in those cases)
#+BEGIN_SRC emacs-lisp
(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i")   'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-z")   'helm-select-action) ; list actions using C-z
#+END_SRC

Enable fuzzy mode for semantic
#+BEGIN_SRC emacs-lisp
(setq helm-semantic-fuzzy-match t
      helm-imenu-fuzzy-match    t)
#+END_SRC

Activate auto resizing of helm window
#+BEGIN_SRC emacs-lisp
(helm-autoresize-mode t)
(helm-mode 1)
#+END_SRC

Set helm-complete-filename-at-point to 'Alt+\', which can be used to
expand a filename given at point to its full system path. Really
useful in cases where one suddenly wants the full path from the
current relative path given.
#+BEGIN_SRC emacs-lisp
(global-set-key "\M-\\" 'helm-complete-file-name-at-point)
#+END_SRC

Revert to Helm's previous behavior in helm-buffers, so that we can
scroll to the ~Recentf~ buffers:
#+begin_src emacs-lisp
(setq helm-move-to-line-cycle-in-source nil)
#+end_src

Use ~rg~ for helm grep:
#+begin_src emacs-lisp
;;(setq helm-grep-ag-command "rg --color=always --colors 'match:fg:black' --colors 'match:bg:yellow' --smart-case --no-heading --line-number %s %s %s")
(setq helm-grep-ag-command "rg --color=always --smart-case --search-zip --no-heading --line-number %s -- %s %s")
;;(setq helm-grep-ag-pipe-cmd-switches '("--colors 'match:fg:black'" "--colors 'match:bg:yellow'"))
(setq helm-grep-ag-pipe-cmd-switches nil)
;;(setq helm-grep-default-command "rg --color=always --colors 'match:fg:black' --colors 'match:bg:yellow' --smart-case --no-heading --line-number %s %s %s")
(setq helm-grep-default-command "rg --color=always -a -d skip %e -n%cH -e %p %f")
#+end_src



* Org mode

** Switch to new org-latex-preview

https://abode.karthinks.com/org-latex-preview/

I'm following the steps outlined there:
#+begin_quote
1. Uninstall any version of Org you might have that’s not the one
   built into Emacs: M-x package-delete ⮐ org. This might give you
   some trouble because of packages that depend on org. If you’re
   using the built-in Org library, you can skip this step.
2. If your Emacs uses native compilation (native-comp-available-p),
   delete the eln-cache for Org files. These should be in one of the
   directories in the list native-comp-eln-load-path.
3. Install the above version of Org with package-vc-install. Run
   (package-vc-install '(org-mode :url
   "https://code.tecosaur.net/tec/org-mode")) Note: We call the
   package org-mode and not org, otherwise we wouldn’t be able to
   delete it afterwards with package-delete due to dependencies of
   other packages on org.
4. Locate the installation path (~/.emacs.d/elpa/org-mode/lisp) or
   equivalent, and run make inside the directory.
5. In your configuration file, you can load Org via
   (use-package org :load-path "~/.emacs.d/elpa/org-mode/lisp/")
#+end_quote

1: I use the built in Org nowadays.
2. Yes, I have native compilation. Will delete Org files
   [[file:eln-cache/29.4-4f53a1f5/]]
3.
#+begin_src emacs-lisp
;; (package-vc-install '(org-mode :url "https://code.tecosaur.net/tec/org-mode"))
;; (package-vc-install '(org-mode :url "/home/basti/src/org-mode-latex-preview"))
;;(package-vc-install '(:url "~/src/org-mode-latex-preview/"))
#+end_src
4. Note: It equires ~libtree-sitter~, so install:
   #+begin_src sh
xbps-install -S tree-sitter tree-sitter-devel
   #+end_src
  before running ~make~! 
5. Adjust the load path: NOTE: We actually do this in [[file:init.el]]
   before we use ~org-babel-load-file~ to not conflict the two versions!
   #+begin_src emacs-lisp
;; (use-package org :load-path "~/.emacs.d/elpa/org-mode/lisp/")
   #+end_src

   #+RESULTS:

Commit with changes to Org-News:
https://code.tecosaur.net/tec/org-mode/commit/33c563da2605067488f6a10ae05f09ec30839204
https://code.tecosaur.net/tec/org-mode/src/branch/dev/etc/ORG-NEWS

Configure the new features:

~org-latex-preview-auto-mode~
#+begin_quote
When this mode is turned on, LaTeX preview overlays in the buffer can
be temporarily disabled by moving the cursor into them.  Moving the
cursor out will display the LaTeX preview image overlay again.
Additionally, editing LaTeX fragments that have previews will cause
the preview images to be updated.
#+end_quote
- [ ] Enable on Org mode loading

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-latex-preview-auto-mode)
#+end_src
  

#+RESULTS:
: t

#+begin_quote
If the option ~org-latex-preview-auto-track-inserts~ is non-nil (which
see), previews for LaTeX fragments will be auto-generated as you type.
#+end_quote
#+begin_src emacs-lisp
(setq org-latex-preview-auto-track-inserts t)
#+end_src

#+RESULTS:
: t

*NOTE*: <2024-11-11 Mon 16:22>
I've been trying to set this up for about an hour now. I finally
managed to get it to ~mostly work, but there are issues:
- automatically switching between preview and TeX source does not
  work, despite ~org-latex-preview-auto-mode~ set
  -> Works now. I misunderstood ~org-latex-preview-auto-mode~. I
  thought it was a variable and not a minor mode.
- when there is an error in a fragment, using org-latex-preview does
  not toggle the preview back to source code
  -> This is not needed with the auto mode working
- it only supports ~pdflatex~, so no unicode math or similar
  -> This is a big shame
- conflicts with our export settings, because it relies on the same
  functionality
  -> I guess we could fix that.

We _can_ use LuaLaTeX, but that disables 'precompilation'. I don't
quite understand what that implies though. Seems to preprocess the
header or something?

Anyhow, it's better than the previous preview logic.

** General Org settings

#+BEGIN_SRC emacs-lisp
; (require 'org)
(require 'org-ref)
(require 'org-ref-helm)
(require 'doi-utils)
(require 'helm-org)
#+END_SRC

Set the TeX compiler Org uses to Lualatex:
#+begin_src emacs-lisp
(setq org-latex-compiler "lualatex")
#+end_src

Disable the =C-'= binding for org-mode, since this conflicts with
avy-goto-char-2 and C-, (=org-cycle-agenda-files=) since it conflicts
with our mapping of =prev-window=.
#+BEGIN_SRC emacs-lisp
(define-key org-mode-map (kbd "C-'") nil)
(define-key org-mode-map (kbd "C-,") nil)
#+END_SRC

Increase size of latex formulas preview in org-mode
#+BEGIN_SRC emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+END_SRC

When exporting org tables to LaTeX, we want the caption to be placed
below the table, instead of above.
#+BEGIN_SRC emacs-lisp
(setq org-latex-caption-above nil)
#+END_SRC

We want to default org-mode to the indented style.
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC

Load source code support for org mode for some so far used languages.
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (C . t)
   (shell . t)
   (nim . t)))
#+END_SRC

Fontify source blocks (enable syntax highlighting of source code)
and set indentation to normal source code indentation
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil
      org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-src-preserve-indentation t)
#+END_SRC


Define additional org mode faces
#+BEGIN_SRC emacs-lisp
(setq org-todo-keyword-faces
      '(
        ("TODO" . (:foreground "#F92672" :weight bold))
        ("STARTED" . (:foreground "purple" :weight bold))
        ("WAITING" . (:foreground "yellow" :weight bold))
        ("MAYBE" . (:foreground "orange" :weight bold))
        ("WONTFIX" . (:foreground "wheat" :weight bold))
        ("DONE" . (:foreground "#A6E22E" :weight bold))
        ))

(setq org-todo-keywords
      '((sequence "TODO" "STARTED" "WAITING" "MAYBE" "|" "DONE" "WONTFIX")))
#+END_SRC

Add some files to org-agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/org/journal.org" "~/org/void_settings.org"))
(setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
#+END_SRC


The following could also be placed in the interface part, but since
it's related to org-mode, it's here. Used to change the sizes of the
headings in an org-mode file, to reduce the sizes slightly.

NOTE: For some reason after updating all packages on
<2019-08-12 Mon 19:10>, the font size modification turned out to make
everything a lot smaller than I intended. Now using the default values
seems correct. Weird.
#+BEGIN_SRC emacs-lisp
;; change sizes of headings in monokai theme for org-mode
;;(setq monokai-height-minus-1 0.7
;;      monokai-height-plus-1 0.8
;;      monokai-height-plus-2 0.85
;;      monokai-height-plus-3 0.9
;;      monokai-height-plus-4 0.95)

;; the following are the defaults
(setq monokai-height-minus-1 0.8
      monokai-height-plus-1 1.1
      monokai-height-plus-2 1.15
      monokai-height-plus-3 1.2
      monokai-height-plus-4 1.3)

#+END_SRC

#+begin_src emacs-lisp
;;(use-package ox-hugo
;;  :ensure t
;;  :after ox)
#+end_src

Setup our ~zsh~ blocks to use same syntax highlighting as ~sh~:
#+begin_src emacs-lisp
(add-to-list 'org-src-lang-modes '("zsh" . sh))
#+end_src

** org-ref settings

Tell ~org-ref~ / ~helm-bibtex~ where our paper PDFs are and which
field of a bibtex entry tells it the filename: 
#+begin_src emacs-lisp
(setq bibtex-completion-library-path '("~/org/Papers/"))
(setq bibtex-completion-pdf-field "File")
#+end_src

Use ~evince~ to open PDFs instead of using the 
#+begin_src emacs-lisp
(setq bibtex-completion-pdf-open-function
  (lambda (fpath)
    (message fpath)
    (call-process "evince" nil 0 nil (expand-file-name fpath))))
#+end_src

#+RESULTS:
| lambda | (fpath) | (message fpath) | (call-process evince nil 0 nil (expand-file-name fpath)) |

#+begin_src emacs-lisp
(setq doi-utils-async-download t)
#+end_src

#+RESULTS:
: t

** Allow inserting links to custom IDs

We want to be able easily insert links to CUSTOM_IDs in an Org
document easily, similar to ~C-c C-l~ for ~org-insert-link~ using Helm
and fuzzy completion support. We start by having a function to collect
all IDs in the buffer and then having an interactive function that
takes all completion elements from that function and map it to ~C-c C-i~:
#+begin_src emacs-lisp
(defun my/org-custom-id-complete ()
  "Provide a list of CUSTOM_IDs in the current buffer for completion."
  (let ((id-regex "^[ \t]*:CUSTOM_ID:[ \t]+\\(\\S-+\\)")
        (ids '()))
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward id-regex nil t)
        (push (match-string-no-properties 1) ids)))
    ids))

(defun my/org-insert-custom-id-link ()
  "Insert a link to a CUSTOM_ID with Helm completion."
  (interactive)
  (let ((selected-id (helm :sources (helm-build-sync-source "CUSTOM_IDs"
                                      :candidates (my/org-custom-id-complete))
                           :buffer "*helm org custom ids*")))
    (when selected-id
      (insert (format "[[#%s]]" selected-id selected-id)))))

(define-key org-mode-map (kbd "C-c C-i") 'my/org-insert-custom-id-link)
#+end_src

** Flyspell-mode

To get spell checking in Org (well every text buffer), we use =flyspell-mode=. Activate it
whenever we use Org mode:
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'flyspell-mode)
#+end_src

Set up flyspell to use =aspell= and define the =--list= command to not
be =-l= (=--lang= in aspell):
#+begin_src emacs-lisp
(setq ispell-program-name "/bin/aspell")
(setq ispell-list-command "--list")
#+end_src
Ref: https://www.emacswiki.org/emacs/FlySpell#h5o-8

Rebind the auto correct and next error bindings for =flyspell-mode=,
since they collide with our change buffer window key bindings.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (flyspell-mode)
            (define-key flyspell-mode-map (kbd "C-.") nil)
            (define-key flyspell-mode-map (kbd "C-,") nil)
            ;; (define-key flyspell-map (kbd "C-.") 'flyspell-auto-correct-word)
            ;; (define-key flyspell-map (kbd "C-,") 'flyspell-goto-next-error)
            )
          )
#+end_src


** Export settings
These settings are specifically related to exporting org-mode files to
HTML, LaTeX etc.

Use the minted package to export org-babel code blocks. Also add some
options to print line numbers and use the monokai background color, if
defined. The monokai_bg color used here is (taken from an Org talk):
#+BEGIN_EXAMPLE
#+LATEX_HEADER: \definecolor{monokai_bg}{RGB}{39, 40, 34}
#+END_EXAMPLE
and to get minted to use the monokai theme, simply add:
#+BEGIN_EXAMPLE
#+LaTeX_HEADER: \usemintedstyle{monokai}
#+END_EXAMPLE

- [ ] Move the package import to setup file?
#+BEGIN_SRC emacs-lisp
(require 'ox-latex)
;; (add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)
(setq org-latex-minted-options
      '(("frame" "lines") ("linenos=true") ("bgcolor=monokai_bg") ("fontsize=\\footnotesize")))
#+END_SRC

Now define pdflatex compilation commands used when =C-c C-e l P= is
pressed. NOTE: if we currently use =C-c C-c= from a LaTeX buffer
itself, we encounter an error, if the minted package is used (since it
needs the =shell-escape= option).
#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process
      '("lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

*** LaTeX export

Add some default packages we want to use for LaTeX export generally:
*UPDATE*: <2024-04-01 Mon 19:04> Moved this directly into the
SETUPFILE below. Easier to have different settings that way.
#+begin_src emacs-lisp
;; (add-to-list 'org-latex-packages-alist '("" "booktabs"))
;; (add-to-list 'org-latex-packages-alist '("" "longtable"))
;; (add-to-list 'org-latex-packages-alist '("" "pdfpages"))
;; (add-to-list 'org-latex-packages-alist '("" "siunitx"))
;; (add-to-list 'org-latex-packages-alist '("" "fontspec"))
;; ;; package that allows inserting unicode characters in math environment
;; (add-to-list 'org-latex-packages-alist '("" "unicode-math"))
;; (add-to-list 'org-latex-packages-alist '("" "amsmath"))
;; (add-to-list 'org-latex-packages-alist '("" "mhchem"))
;; ;; Make the default margins on export smaller
;; (add-to-list 'org-latex-packages-alist '("margin=2.5cm" "geometry"))
;; ;; subcaption for subfigures (side by side)
;; ;; style such that it is placed in parenthesis (a)
;; ;; ref: https://tex.stackexchange.com/a/131366
;; (add-to-list 'org-latex-packages-alist '("labelformat=simple" "subcaption"))
#+end_src

#+RESULTS:
| labelformat=simple | subcaption   |     |
|                    | mhchem       |     |
|                    | amsmath      |     |
|                    | unicode-math |     |
|                    | fontspec     |     |
|                    | siunitx      |     |
|                    | pdfpages     |     |
|                    | longtable    |     |
|                    | booktabs     |     |
|                    | minted       |     |
|                    | minted       | t   |
|                    | booktabs     | nil |

Configurations for these packages is stored in
[[file:default_latex_header.org]]
and needs to be included in the Org file using
#+begin_example
#+SETUPFILE: ~/.emacs.d/default_latex_header.org
#+end_example


*** HTML export
:PROPERTIES:
:CUSTOM_ID: sec:html_export
:END:

Note: following currently not in use. Added to header of org file
instead, since the following doesn't work. FIXIT
Include siunitx by default for LaTeX fragments:
#+BEGIN_SRC emacs-lisp
;; (setq org-format-latex-header (plist-put org-format-latex-header "\\usepackage{siunitx}"))
#+END_SRC

**** MathJax setup

Set HTML export such that it can work with siunitx:
    
Old code for MathJax version 2:

This works now. Important points:
- the script type should be ~text/x-mathjax-config~ for the MathJax
  configuration!
- The ~siunitx~ package can be / should be included by
  ~[Contrib]/siunitx/siunitx.js~
- the ~siunitx.js~ file is *NOT NEEDED* for whatever reason
- we also added line numbering via the ~TeX~ ~equationNumbers~ entry
  using amsmath logic.
- enabled inline math via single ~$foo$~ 
#+BEGIN_SRC emacs-lisp
;; modify path and mathml
(setq org-html-mathjax-options
      '((path "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML")
        (scale "100")
        (align "center")
        (indent "2em")
        (mathml t)))

(setq org-html-mathjax-template
      "
<script type=\"text/javascript\" src=\"%PATH\"></script>
<script type=\"text/x-mathjax-config\">
<!--/*--><![CDATA[/*><!--*/
    MathJax.Hub.Config({
        jax: [\"input/TeX\", \"output/HTML-CSS\"],
        extensions: [\"tex2jax.js\",\"TeX/AMSmath.js\",\"TeX/AMSsymbols.js\",
                     \"TeX/noUndefined.js\", \"[Contrib]/siunitx/siunitx.js\", \"[Contrib]/mhchem/mhchem.js\"],
        tex2jax: {
            inlineMath: [ [\"\\\\(\",\"\\\\)\"], ['$', '$'], ],
            displayMath: [ ['$$','$$'], [\"\\\\[\",\"\\\\]\"], [\"\\\\begin{displaymath}\",\"\\\\end{displaymath}\"] ],
            skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"pre\",\"code\"],
            ignoreClass: \"tex2jax_ignore\",
            processEscapes: false,
            processEnvironments: true,
            preview: \"TeX\"
        },
        showProcessingMessages: true,
        displayAlign: \"%ALIGN\",
        displayIndent: \"%INDENT\",

        \"HTML-CSS\": {
             scale: %SCALE,
             availableFonts: [\"STIX\",\"TeX\"],
             preferredFont: \"TeX\",
             webFont: \"TeX\",
             imageFont: \"TeX\",
             showMathMenu: true,
        },
        MMLorHTML: {
             prefer: {
                 MSIE:    \"MML\",
                 Firefox: \"MML\",
                 Opera:   \"HTML\",
                 other:   \"HTML\"
             }
        },
        TeX: {
              equationNumbers: { autoNumber: 'AMS' },
              Macros: {
                  ccsini: '{\\\\mathrm{Si}₃\\\\mathrm{N}₄}',
                  cefe: '{\\\\ce{^{55}Fe}}',
                  vektor: ['{\\\\begin{pmatrix}#1\\\\end{pmatrix}}', 1],
                  mtrix: ['{\\\\begin{pmatrix}#1\\\\end{pmatrix}}', 1],
                  cp: '{\\\\mathrm{CP}}',
                  cpt: '{\\\\mathrm{CPT}}',
                  dd: '{\\\\mathop{}\\\\!{\\\\mathrm{d}}}',
                  sinc: '{\\\\mathrm{sinc}}'
              }
        }
    });
/*]]>*///-->
</script>
")
#+END_SRC



The following *WOULD* be some code to use MathJax 3, but *uhhhh* there
is no siunitx for that. So screw that!
#+BEGIN_SRC emacs-lisp :exports none
;; modify path and mathml
(setq org-html-mathjax-options-v3
    '((path "https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/es5/core.min.js")
    (scale "100")
    (align "center")
    (indent "2em")
    (mathml t)))

(setq org-html-mathjax-template-v3
              "
<script type='text/javascript' id='MathJax-script' async src='%PATH%/tex-chtml.js'></script>
<script>
window.MathJax = {
  tex: {
    inlineMath: [['\\(', '\\)']],
    displayMath: [['$$', '$$'], ['\\[', '\\]'], ['\\begin{displaymath}', '\\end{displaymath}']],
    processEscapes: false,
    packages: { '[+]': ['noerrors'] }, // This is just an example, adjust based on needed extensions
    tags: 'ams', // If you want AMS-style equation numbering
    macros: {
      // For any additional macros you want to define, like:
      // mymacro: ['{\\frac{#1}{#2}}', 2]
    }
  },
  loader: {
    load: ['[tex]/noerrors'] // This is just an example, adjust based on needed extensions
  },
  options: {
    ignoreHtmlClass: 'tex2jax_ignore',
    processHtmlClass: 'tex2jax_process',
    displayAlign: '%ALIGN', // Adjust with your preference
    displayIndent: '%INDENT' // Adjust with your preference
  },
  startup: {
    typeset: true
  },
  chtml: {
    scale: %SCALE,
    fontURL: '%PATH%/fonts/woff-v2', // Adjust with your font path
    displayAlign: '%ALIGN', // Adjust with your preference
    displayIndent: '%INDENT' // Adjust with your preference
  }
};
</script>
")
#+END_SRC

**** Automatic conversion of PDFs to SVGs

Automate the conversion of PDFs to SVGs as a step in the export to
HTML. I might have used [[https://chat.openai.com/share/debb3964-cbfb-497f-bac8-829622f35172][GPT4 in the process a bit]]! 
#+begin_src emacs-lisp
;; (defun my/org-pdf-to-svg (backend)
;;   "Convert PDF images to SVG in Org buffer for HTML export."
;;   (when (eq backend 'html) ; Only process for HTML export
;;     (goto-char (point-min))
;;     (while (re-search-forward "\\[\\[\\(.*?\\)\\.pdf\\]\\]" nil t)
;;       (let ((pdf-file (match-string 1))
;;             (svg-file))
;;         (setq svg-file (concat pdf-file ".svg"))
;;         (unless (file-exists-p svg-file)
;;           (shell-command (format "inkscape -o %s %s.pdf" svg-file pdf-file)))
;;         (replace-match (format "[[%s.svg]]" pdf-file) nil t)))))
;;(while (re-search-forward "\\[\\[\\(.*?\\)\\.\\(.*?\\)\\]\\]" nil t)
;;(while (re-search-forward "\\[\\[\\(.*\\)\\.\\([^\\.]+\\)\\]\\]" nil t)
;; (defun my/org-html-export-figs-old (backend)  
;;   "Convert PDF images to SVG in Org buffer for HTML export,
;; and replace absolute paths with relative ones pointing to './figs/'.
;; Further copy all other figures (PNG, ...) to the same './figs/' dir"
;;   (when (eq backend 'html) ; Only process for HTML export
;;     (goto-char (point-min))
;;     (let* ((figs-dir "./figs/"))
;;       (unless (file-exists-p figs-dir)
;;         (make-directory figs-dir))
;;       (while (re-search-forward "\\[\\[\\(.*?\\)\\.\\([^\\.]+\\)\\]\\]" nil t)
;;         (let* ((absolute-path (match-string 1))
;;                (extension (match-string 2)))
;;           (if (and absolute-path extension 
;;                    (not (string-empty-p absolute-path))
;;                    (not (string-empty-p extension)))
;;               (progn
;;                 (let* ((filename (file-name-nondirectory absolute-path))
;;                        (new-file (perform-replacement filename relative-path absolute-path))
;;                        (relative-path (concat figs-dir filename))
;;                        (new-file (cond
;;                                   ((string-equal "pdf" extension) (convert-pdf-to-svg relative-path absolute-path))
;;                                   ((member extension '("png" "jpg" "jpeg")) (copy-file-to-figs-dir absolute-path relative-path extension))
;;                                   (t (concat absolute-path "." extension)))))
;;                   (message (format "Match of path %s and match of extension %s for input" absolute-path extension))
;;                   (message (format "Handling %s of extension '%s' is equal to pdf? %s" new-file extension (string-equal "pdf" extension)))
;;                   (replace-match (format "[[%s]]" new-file) nil t)))))))))


(defun my/org-pdf-to-svg (backend)
  "Convert PDF images to SVG in Org buffer for HTML export,
and replace absolute paths with relative ones pointing to './figs/'."
  (when (eq backend 'html) ; Only process for HTML export
    (goto-char (point-min))
    (let* ((figs-dir "./figs/"))
      (unless (file-exists-p figs-dir)
        (make-directory figs-dir))
      (while (re-search-forward "\\[\\[\\(.*?\\)\\.pdf\\]\\]" nil t)
        (let* ((absolute-path (match-string 1))
               (filename (file-name-nondirectory absolute-path))
               (relative-path (concat figs-dir filename))
               (svg-file (concat (file-name-sans-extension relative-path) ".svg")))
          (unless (file-exists-p svg-file)
            (shell-command (format "inkscape -o %s %s.pdf" svg-file absolute-path)))
          (replace-match (format "[[%s]]" svg-file) nil t))))))

(defun file-size (path)
  "Returns the file size of the given file"
  (file-attribute-size (file-attributes path)))

(defun check-and-convert (target extension input)
  "Checks if 'input' already exists, if not converts it using 'inkscape' to a filename of
'target' of type 'extension'. In either case returns the target file name."
  (let* ((outfile (concat (file-name-sans-extension target) extension)))
    (unless (file-exists-p outfile)
      (progn
        (message "Converting %s to %s" input outfile)
        (shell-command (format "inkscape --pdf-poppler -o %s %s" outfile input))))
    outfile))

(defun convert-pdf-to-svg (relative-path absolute-path)
  "Converts the given file.pdf (relative-path contains the `.pdf` suffix) to file.svg and places the SVG in path,
if the given file is larger than 5MB we convert to a PNG instead (hopefully working around freezing the entire
computer!"
  (if (file-exists-p absolute-path)
      (if (<= (file-size absolute-path) 5000000)
          (check-and-convert relative-path ".svg" absolute-path) ;; create SVG file
        (progn
          (message "Skipping file %s because it is too large. Converting to PNG instead." absolute-path)
          (check-and-convert relative-path ".png" absolute-path))) ;; create PNG file
    (progn
      (message "[WARNING] The file %s does not exist on your file system." absolute-path)
      absolute-path)))

(defun copy-file-to-figs-dir (source target extension)
  "Copies the figure from source (contains suffix) to target and returns the target"
  (message (format "Copying other image %s to %s of extension %s" source target extension))
  (unless (file-exists-p target)
    (let* ((target-path (file-name-parent-directory target)))
      (unless (file-exists-p target-path) ;; Create target directory if not exists
        (make-directory target-path t)))
    (copy-file source target))
  target) ;; return target to replace the match

(defun perform-replacement (path)
  "Performs replacement of the given path to the target path at './figs',
potentially converting the file from a PDF to an SVG.
Note that importantly we keep the file structure of the original paths in tact. This leads
to quite a nested directory structure inside of `./figs`, but I think it is worth it to
keep in tact where files come from. Especially with duplicate file names it would be a mess.
We 'leak' our directory structure when uploading data, but that's fine imo.
For this reason it is important that 'path' has already been fully expanded!
Note that we do not perform any replacement on file types other than 'pdf', 'jpg', 'png'!
"
  (message (format "Replacement of '%s'" path))
  (let* ((figs-dir "./figs/"))
    (unless (file-exists-p figs-dir)
      (make-directory figs-dir))
    (let* ((filename (file-name-nondirectory path))
           (extension (file-name-extension path))
           (relative-path (concat figs-dir path)) ;; Copy e.g. /home/basti/org/Figs/foo.pdf to ./figs/home/basti/org/Figs/foo.svg
           ;; to keep relative directory structure (if multiple filenames clash and for sanity!)
           (new-file (cond
                      ((string-equal "pdf" extension) (convert-pdf-to-svg relative-path path))
                      ((member extension '("png" "jpg" "jpeg")) (copy-file-to-figs-dir path relative-path extension))
                      (t path))))
      (message (format "Have filename '%s' extension '%s'" filename extension ))
      (message (format "Will be copied to: '%s' and path: %s" new-file path))
      (when (not new-file)
        (message (format "Path exists %s" (file-exists-p (file-name-parent-directory new-file)))))
      (when (and extension (not (string-equal new-file path)))  ;; Only if this is a file, has an extension and is not 'path'      
        (unless (file-exists-p (file-name-parent-directory new-file))
          (make-directory (file-name-parent-directory new-file) t))) ;; create nested directory, i.e. `t` for PARENTS argument
      (concat "./" (file-relative-name new-file "./"))))) ;; sanitize the path from './' on
;; (perform-replacement "test_path.txt")

(defun my/org-html-export-figs (backend)
  "Convert PDF images to SVG in Org buffer for HTML export,
and replace absolute paths with relative ones pointing to './figs/'.
Further copy all other figures (PNG, ...) to the same './figs/' dir."
  (when (eq backend 'html) ; Only process for HTML export
    (goto-char (point-min))
    (while (re-search-forward org-link-bracket-re nil t) ; Use the built-in regex for org links
      (let ((link-data (org-element-context))) ; Get the link data using Org's built-in function
        (when (eq (car link-data) 'link) ; Check if the context is a link
          (let* ((path (org-element-property :path link-data))
                 (type (org-element-property :type link-data)))
            (when (string= type "file")
              (let* ((new-file (perform-replacement (expand-file-name path)))) ;; make sure to expand `~` etc
                ;;              (message (format "Match of path '%s' and match of extension '%s' for input" path extension))
                ;;              (message (format "Handling '%s' of extension '%s' is equal to pdf? '%s'" new-file extension (string-equal "pdf" extension)))
                (goto-char (org-element-property :begin link-data))
                (re-search-forward org-link-bracket-re)
                (replace-match (format "[[%s]]" new-file) nil t)))))))))
#+end_src

#+RESULTS:
: my/org-html-export-figs

Add he HTML export PDF conversion / figure copy hook to the Org export
processing hooks that run before the actual export:
#+begin_src emacs-lisp
(add-hook 'org-export-before-processing-hook 'my/org-html-export-figs)
;(remove-hook 'org-export-before-processing-hook 'my/org-html-export-figs)
;; org-export-before-processing-hook
;; (remove-hook 'org-export-before-processing-hook 'my/org-pdf-to-svg)

#+end_src



*** Subfigure DSL 

Setup our custom ~subfigure~ as an emacs-lisp code block, make
~subfigure~ blocks behave like emacs-lisp blocks:
#+begin_src emacs-lisp
(add-to-list 'org-src-lang-modes '("subfigure" . emacs-lisp))
#+end_src

Development notes here
[[file:~/org/Misc/side_by_side_subfigure_elisp_dsl.org]].

The DSL works by converting to the required code to generate a
side-by-side figure on the specific backend. The ~subfigure~ code
present in the buffer will be fully replaced by the resulting code.

For the HTML backend, we need to be a bit more careful with respect to
the figure numbering. We need to use the HTML5 option for Org and tell
it to keep our own figure labels. More on that below.


Define the heart of the DSL, i.e. applying it on the elements in the
Org file that are source code blocks of the 'subfigure' language and
mapping the symbols from their backend specific versions to the
symbols used in the DSL:
#+begin_src emacs-lisp
(defun apply-subfigure-dsl ()
  "Performs the actual application of the subfigure DSL, by mapping over
all Org source code blocks, checking if they are `subfigure` blocks and
if so evaluating their body."
  (let (subfigures)
    (org-element-map (org-element-parse-buffer) 'src-block ;; collect all subfigure blocks
      (lambda (src-block)
        (when (string= (org-element-property :language src-block) "subfigure")
          (push src-block subfigures))))
    (dolist (src-block subfigures) ;; process each subfigure block
      (let* ((begin (org-element-property :begin src-block))
             (end   (org-element-property :end src-block))
             (contents (org-element-property :value src-block))
             (result (eval (read contents))))
        (goto-char begin)
        (delete-region begin end)
        (insert result)))))
;; 
;; (defun apply-subfigure-dsl ()
;;   "Performs the actual application of the subfigure DSL, by mapping over
;; all Org source code blocks, checking if they are `subfigure` blocks and
;; if so evaluating their body."
;;   (org-element-map (org-element-parse-buffer) 'src-block ;; map all source blocks
;;     (lambda (src-block)                                  ;; with this lambda
;;       (when (string= (org-element-property :language src-block) "subfigure") ;; if block language is subfigure...
;;         (let* ((begin (org-element-property :begin src-block))
;;                (end   (org-element-property :end src-block))
;;                (contents (org-element-property :value src-block))
;;                (result (eval (read contents))))
;;           (goto-char begin)
;;           (delete-region begin end)
;;           (insert result))))))

(defun my/org-process-subfigure-dsl (backend &optional subtreep)
  "Processes `subfigure` Org source code blocks, which contain our subfigure DSL.
This DSL generates different code for the LaTeX and HTML backends to produce side by side
figures.
The optional `subtreep` argument is for when we advice `org-ref-process-buffer`, which
passes this argument and is used to select whether we currently restrict to a subtree.
We just ignore it here.
  "
  (cond
   ((eq backend 'latex)
    ;; cl-letf ;; bind backend specific functions!
    (cl-letf (((symbol-function 'label) 'label-latex)
              ((symbol-function 'ref) 'ref-latex)
              ((symbol-function 'caption) 'caption-latex)
              ((symbol-function 'spacing) 'spacing-latex)              
              ((symbol-function 'includegraphics) 'includegraphics-latex)
              ((symbol-function 'subfigure) 'subfigure-latex)
              ((symbol-function 'figure) 'figure-latex)
              ((symbol-function 'enskip) 'enskip-latex)
              ((symbol-function 'linewidth) 'linewidth-latex)
              ((symbol-function '$) '$-latex)
              ((symbol-function 'subref) 'subref-latex)
              ((symbol-function 'cite) 'cite-latex))
      (apply-subfigure-dsl)))
   ((eq backend 'html)
    (cl-letf (((symbol-function 'label) 'label-html)
              ((symbol-function 'ref) 'ref-html)
              ((symbol-function 'caption) 'caption-html)
              ((symbol-function 'spacing) 'spacing-html)                            
              ((symbol-function 'includegraphics) 'includegraphics-html)
              ((symbol-function 'subfigure) 'subfigure-html)
              ((symbol-function 'figure) 'figure-html)
              ((symbol-function 'enskip) 'enskip-html)
              ((symbol-function 'linewidth) 'linewidth-html)
              ((symbol-function '$) '$-html)
              ((symbol-function 'subref) 'subref-html)              
              ((symbol-function 'cite) 'cite-html))
      (apply-subfigure-dsl)))
   ))
#+end_src

And now apply that hook also to the list of Org preprocessing hooks:
*NOTE*: For the HTML backend this hook doesn't do anything. We already
advise an ~org-ref~ function to perform the processing before
~org-ref~ processes the document. Ideally we wouldn't rerun it again though!

#+begin_src emacs-lisp
(add-hook 'org-export-before-processing-hook 'my/org-process-subfigure-dsl)
;;(add-hook 'org-export-before-parsing-hook 'my/org-process-subfigure-dsl)
;;(remove-hook 'org-export-before-parsing-hook 'my/org-process-subfigure-dsl)
;;(remove-hook 'org-export-before-processing-hook 'my/org-process-subfigure-dsl)
#+end_src


A short helper:
#+begin_src emacs-lisp
(defun process-args-to-plist (args)
  "Converts the given arguments containing plists into a single plist 
where potential duplicate keys in args are mapped to a single key. Each
key in the resulting plist has a regular list as its argument."
  (let ((plist '()))
    ;; Loop through evaluated args
    (dolist (res args) 
      (let* ((key (car res))          ; Extract the property name
             (current (plist-get plist key)))  ; Current list for the key
        ;; If the key already exists, append. Otherwise, create a new list.
        (if current
            (plist-put plist key (append current (cdr res)))
          (setq plist (plist-put plist key (cdr res))))))
    plist))
#+end_src


DSL commands for the LaTeX backend:
#+BEGIN_SRC emacs-lisp
(defun label-latex (arg)
  (list :label (format "\\label{%s}" arg)))

(defun ref-latex (arg)
  (format "\\ref{%s}" arg))

(defun caption-latex (&rest body)
  (list :caption (format "\\caption{%s}"
	                 (mapconcat 'eval body ""))))

(defun spacing-latex (&rest body)
  "Can be used to set the 'spacing' symbol to use after the `subfigure` command.
   The default is a literal '%'. Set to the empty string if you want to line break
   and e.g. place 4 subfigures in a grid."
  (list :spacing (format "%s"
	                 (mapconcat 'eval body ""))))

(defun includegraphics-latex (options path)
  (format "\\includegraphics%s{%s}"
	  (if options
	      (format "[%s]"
		      (mapconcat (lambda (ccell)
				   (format "%s=%s"
					   (car ccell)
					   (cdr ccell)))
				 options
				 ","))
	    "")
	  path))

(defun subfigure-latex (width caption label body &optional spacing)
  (message "Is it true? %s " (string-prefix-p "\\caption" caption))
  (message "Caption is: %s " caption)
  (unless (plist-get caption :caption)
    (error "Expected a caption of the form \\caption{foo}, got %s" caption))
  (unless (plist-get label :label)
    (error "Expected a label of the form \\label{foo}, got %s" label))
  (let ((spacing (or spacing (list :spacing "%"))))
    (list :subfigure (format "\\begin{subfigure}{%s}
  %s
  %s
  %s
\\end{subfigure}%s"
                             width body (plist-get caption :caption) (plist-get label :label) (plist-get spacing :spacing)))))

(defun figure-latex (options &rest body)
  (message "%s" (process-args-to-plist body))
  (let* ((fig-body (process-args-to-plist body))
         (label (plist-get fig-body :label))
         (caption (plist-get fig-body :caption))
         (figs (plist-get fig-body :subfigure)))
    (message "LABEL %s CAPTION %s FIGS %s" label caption figs)
    (format "\\begin{figure}[htbp]
%s
%s
%s
\\end{figure}\n\n"
            (string-join figs "\n") (string-join caption " ") (string-join label " "))))
;; (mapconcat 'eval body "\n")))

(defun enskip-latex () "\\enskip")

(defun linewidth-latex (size)
  (format "%s\\linewidth" size))

(defun num (arg)
  (format "\\num{%s}" arg))

(defun SI (value unit)
  (format "\\SI{%s}{%s}" value unit))

(defun $-latex (&rest arg)
  (format "$%s$" (apply 'concat arg)))

(defun subref-latex (arg)
  (format "\\subref{%s}" arg))

(defun cite-latex (arg)
  (format "\\cite{%s}" arg))
#+END_SRC

And for HTML (unfinished + we still need to rename the functions!)
#+begin_src emacs-lisp
(defun label-html (arg)
  (list :label (format "%s" arg)))
;;  (format "<a name=\"%s\"></a>" arg))

(defun ref-html (arg)
  (format "<a href=\"#%s\"></a>" arg))

(defun caption-html (&rest body)
  (list :caption (format "<figcaption>%s</figcaption>"
	                 (mapconcat 'eval body ""))))

(defun spacing-html (&rest body)
  "Can be used to set the 'spacing' symbol to use after the `subfigure` command.
   The default is a literal '%'. Set to the empty string if you want to line break
   and e.g. place 4 subfigures in a grid. Does not do anything on HTML"
  (list :spacing (format "%s"
	                 (mapconcat 'eval body ""))))

(defun includegraphics-html (options path)
  ;; 1. perform replacement of the actual file we insert!
  (unless (listp options)
    (error "Expected a list as the first argument, but got '%s'" options))
  (message "Looking at '%s' with options '%s'" path (mapconcat #'prin1-to-string options ", "))
  (message "Last link '%s'" (last options))
  (let ((new-file (perform-replacement (expand-file-name path))))
    (message "Got file '%s' after replace" new-file)
    (format "<img src=\"%s\" %s >" ;; for now ignore size
	                 new-file (cdr (car options)))))

(defun subfigure-html (width caption label body &optional spacing)
  (list :subfigure (format "<figure class=\"subfigure\" id=\"%s\" %s>%s%s</figure>"
                           (plist-get label :label) width body (plist-get caption :caption))))
;;	  (mapconcat 'eval body "")))
;;	  (when options
;;	    (concat "<br>"
;;		    (mapconcat 'eval options "")))))

;;    (message "LABEL %s CAPTION %s FIGS %s" label caption figs)
;;    (format "\n#+BEGIN_EXPORT HTML
;;<figure class=\"figure-wrapper\" id=\"%s\">
;;%s
;;%s
;;</figure>
;;#+END_EXPORT\n\n" (string-join label "\n") (string-join figs " ") (string-join caption " "))))

(defun figure-html (options &rest body)
  "NOTE: We do not wrap the output in a `#+BEGIN_EXPORT HTML` for now, because when using
the subfigure DSL this breaks ~org-ref~. We need to run a fixup script after producing the HTML."  
  ;; process the inputs
  (message "%s" (process-args-to-plist body))
  (let* ((fig-body (process-args-to-plist body))  ;;(process-args-to-plist 'body)
         (label (plist-get fig-body :label))
         (caption (plist-get fig-body :caption))
         (figs (plist-get fig-body :subfigure)))
    (format "\n<figure class=\"figure-wrapper\" id=\"%s\">
%s
%s
</figure>
\n\n" (string-join label "\n") (string-join figs " ") (string-join caption " "))))

          ;;label (cl-map 'eval body "\n")))

(defun enskip-html () "")

;; Think about what to do with line width
(defun linewidth-html (size)
  (unless (numberp size)
    (error "Expected a size as a number, but got %s" size))
  (format "data-width=\"%d%%\"" (- (* size 100) 1)))
;  (format "data-width=\"%d%%\"" (* size 100)))
  

(defun SI (value unit)
  (format "\\SI{%s}{%s}" value unit))

(defun $-html (&rest arg)
  (format "$%s$" (apply 'concat arg)))

(defun subref-html (arg)
  (ref-html arg))

(defun cite-html (arg)
  "Important: We insert a space after the citation, because otherwise we might
generate something like:
cite:&foo.</figcaption>
if the citation is directly at the end of the subfigure caption & only has a dot
without spaces after it."
  (format "cite:&%s " arg))
#+end_src

#+RESULTS:
: subref-html

Finally deal with linking to the ~subfigure~ references: We define a
custom link type ~sref~, which handles our custom ~subfigure~
references correctly. That means on the LaTeX backend it inserts a
~\ref~ (or ~\subref~) while on the HTML backend it uses the identifier
and prepends a ~#~ to make it a file local link.
#+begin_src emacs-lisp
(org-link-set-parameters "sref"
                         :follow (lambda (path) (org-open-link-from-string (format "[[ref:%s]]" path)))
                         :help-echo "Click to follow link."
                         :export (lambda (path desc format)
                                   (cond
                                    ((eq format 'latex)
                                     (format "\\ref{%s}" path))
                                    ((eq format 'html)
                                     (format "<a href=\"#%s\">#%s</a>" path (or desc path)))
                                    (t path))))
(org-link-set-parameters "s-subref"
                         :follow (lambda (path) (org-open-link-from-string (format "[[ref:%s]]" path)))
                         :help-echo "Click to follow link."
                         :export (lambda (path desc format)
                                   (cond
                                    ((eq format 'latex)
                                     (format "\\subref{%s}" path))
                                    ((eq format 'html)
                                     (format "<a href=\"#%s\">#%s</a>" path (or desc path)))
                                    (t path))))
#+end_src

**** HTML specific settings

Set the HTML backend to use our own labels for things instead of
replacing the labels by Org generated ones. The only advantage of Org
generated labels is that they are for sure unique. But we can take
care of that ourselves:
#+begin_src emacs-lisp
(setq org-html-prefer-user-labels t)
#+end_src

Further, we need to enable the HTML5 backend so that the produced HTML
contains ~<figure>~ tags and ~<figcaption>~ tags instead of using
regular ~div~ for the figure environment. This is mainly so that we
can use CSS counters instead of the hardcoded ~figure-number~ divs
that contain "Figure: %i" essentially.

Ref:
- https://orgmode.org/manual/HTML-doctypes.html
  https://emacs.stackexchange.com/a/27697
#+begin_src emacs-lisp
(setq org-html-html5-fancy t
      org-html-doctype "html5")
#+end_src

Now the relevant CSS that needs to be included in the CSS used by the
HTML file. This is also found in our 'reference' CSS file:
[[file:~/org/resources/org_html_export.css]]
(Thanks GPT4 for making writing CSS tolerable)
#+begin_src css
/* Disable the hardcoded figure number of Org */
.figure-number {
    display: none;
}

body {
    /* Reset only the main figure counter */
    counter-reset: fig-counter subfig-counter;
}

figure {
    /* Increment the global figure counter for every top-level figure */
    counter-increment: fig-counter;
}

.figure-wrapper {
    margin: 3%;
}

figure:not(.subfigure) {
    /* Reset the subfigure counter for every new top-level figure */
    counter-reset: subfig-counter;
}

/* Use a class to identify subfigures, 'subfigure' */
/* Use the data-width attribute for the subfigure width */
figure.subfigure {
    /* Increment the subfigure counter for every subfigure */
    counter-increment: subfig-counter;
    display: inline-block;
    vertical-align: top;
    box-sizing: border-box;
    padding: 0 0.0%;
    margin: 0;
/* vertical alignment could be nice, but is broken if one caption is longer! */
/*    vertical-align: bottom; */
}

figure.subfigure[data-width] {
    width: attr(data-width);  /* Fetch width from data-width attribute */
}

/* Use the data-width attribute for the image width within subfigures */
figure.subfigure img[data-width] {
    width: attr(data-width);      /* Fetch width from data-width attribute */
    max-width: 100%;
    display: block;
    margin: 0 auto;
}

figure.subfigure figcaption {
    text-align: center; /* Centers the text within the figcaption */
    display: block;     /* Ensures figcaption behaves like a block */
    margin: 0 auto;     /* Centers the block itself, if it's not already full width */
}

figcaption::before {
    /* Display the global counter value before each main figcaption */
    content: "Figure " counter(fig-counter) ": ";
}

/* Use the subfig class to display the subfigure counter */
figure.subfigure figcaption::before {
    /* Display the combined global and subfigure counter values */
    content: counter(fig-counter) " - " counter(subfig-counter, lower-alpha) ": ";
}
#+end_src


Handling the size of the figures based on their ~data-width~ attribute
(of the ~<figure>~ tag) using some JS. Also make the images clickable
such that they double in size on click (side-by-side to
top-to-bottom):

- We also added a bit of JS code to adjust the sizes of all plots with a
  ~data-width~ field. We just abuse the MathJax script string, because
  it guarantees the JS code appears next to other JS code.
- More JS code to make the side-by-side images clickable so that we
  double their size (top to bottom after clicking) to have them much
  larger.
  - [X] *Maybe this should only double that specific version?*
- The second event listener sets foldable sections (i.e. ~:extented:~
  blocks in an Org file) such that they are folded by default, but
  become visible upon a click on the title.
#+begin_src emacs-lisp
(setq org-html-head
      "
<link rel='stylesheet' type='text/css' href='org_html_export.css' />
<script type='text/javascript'>

document.addEventListener('DOMContentLoaded', function() {
    // Set the initial width for subfigures and their images
    document.querySelectorAll('figure.subfigure[data-width]').forEach(function(subfigure) {
        subfigure.style.width = subfigure.getAttribute('data-width');
    });

    document.querySelectorAll('figure.subfigure img[data-width]').forEach(function(img) {
        img.style.width = img.getAttribute('data-width');
    });

    // Event listener for images within subfigures
    document.querySelectorAll('figure.subfigure img[data-width]').forEach(function(img) {
        img.addEventListener('click', function() {
            // Determine the .figure-wrapper that contains the clicked image
            let wrapper = this.closest('.figure-wrapper');

            // If found, adjust the sizes of its subfigures
            if (wrapper) {
                let subfigures = wrapper.querySelectorAll('figure.subfigure');
                subfigures.forEach(subfigure => {
                    let width = parseFloat(subfigure.getAttribute('data-width'));
                    if (width < 50) { // Double size if less than 50%
                        subfigure.setAttribute('data-width', (width * 2) + '%');
                        subfigure.style.width = (width * 2) + '%';
                    } else { // Halve size otherwise
                        subfigure.setAttribute('data-width', (width / 2) + '%');
                        subfigure.style.width = (width / 2) + '%';
                    }
                });
            }
        });
    });
});

document.addEventListener('DOMContentLoaded', function () {
    var headers = document.querySelectorAll('h1 .extended, h2 .extended, h3 .extended, h4 .extended, h5 .extended, h6 .extended');

    headers.forEach(function (header) {
        var foldableHeader = header.closest('h1, h2, h3, h4, h5, h6');
        if (foldableHeader) {
            foldableHeader.classList.add('foldable-header');
            var nextElement = foldableHeader.nextElementSibling;
            var contentToFold = [];
            while (nextElement && !nextElement.matches('h1, h2, h3, h4, h5, h6')) {
                contentToFold.push(nextElement);
                nextElement = nextElement.nextElementSibling;
            }
            contentToFold.forEach(function (element) {
                element.classList.add('folded-content');
            });

            foldableHeader.addEventListener('click', function () {
                contentToFold.forEach(function (element) {
                    if (element.style.display === 'none' || element.style.display == '') {
                        element.style.display = 'block';
                    } else {
                        element.style.display = 'none';
                    }
                });
            });
        }
    });
});

</script>
")
#+end_src

**** Handling the subfigure DSL together with ~org-ref~

By default the subfigure DSL will break ~org-ref~ citations that
happen in such figure captions. To fix it we have to hack around a
bit, by advising the actual ~org-ref~ processing function.
See [[file:~/phd/thesis.org::#sec:todos:html_export:org_ref_subfigure_dsl]]
for details.

We use ~advice-add~ with ~:around~ as seen in the below section to first
perform our DSL replacement, _then_ let ~org-ref~ do its thing and
finally walk the document again to put all ~<figure>~ tags into a
~#+BEGIN_EXPORT HTML~ block. This is required, because if we emit the
expanded DSL into such a block, ~org-ref~ just ignores it.
This still requires postprocessing using a Nim script,
[[file:~/phd/code/split_thesis_html.nim]] though.


#+begin_src emacs-lisp
(defun replace-html-tags-in-region (start stop)
  "Replace @@html:( some text ) @@ with some text in the region from START to STOP.
Return the total number of characters removed.
NOTE: The space after `)` and before `@@` MIGHT EXIST in the file!"
  (interactive "r")  ;; Make the function interactive to select the region
  (save-excursion
    (goto-char start)
    (let ((pattern "@@html:\\([^@]+\\)@@")  ;; Define the regex pattern
          (total-removed 0))  ;; Initialize the counter
      (while (re-search-forward pattern stop t)
        (let ((match-length (- (match-end 0) (match-beginning 0)))
              (replacement-length (length (match-string 1))))
          (replace-match (match-string 1) nil nil)
          (setq total-removed (+ total-removed (- match-length replacement-length)))))
      (message "Total characters removed: %d" total-removed)
      total-removed)))

(defun wrap-html-figures-in-org ()
  "Wrap <figure> HTML blocks inside `#+BEGIN_EXPORT HTML ... #+END_EXPORT` in the current Org buffer."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (condition-case err
        (while (re-search-forward "<figure class=\"figure-wrapper\"" nil t)
          (let ((start (match-beginning 0))
                (figure-count 1))
            ;; Move forward to find the matching closing </figure> tag
            (while (and (> figure-count 0)
                        (re-search-forward "</?figure" nil t))
              (if (string= (match-string 0) "<figure")
                  (setq figure-count (1+ figure-count))
                (setq figure-count (1- figure-count))))
            (if (zerop figure-count)
                (let ((end (match-end 0)))
                  ;; First remove any possible @@html:( ... ) @@ org-ref statements and leave ...
                  (setq end (- end (replace-html-tags-in-region start end)))
                  ;; Insert the export block delimiters
                  (goto-char (+ end 1)) ;; We match `</figure`, so need to insert after closing `>`
                  (insert "\n#+END_EXPORT")
                  (goto-char start)
                  (insert "#+BEGIN_EXPORT HTML\n")
                  ;; Move point to end to avoid reprocessing the same block
                  (goto-char (+ end (length "\n#+END_EXPORT"))))
              (error "Unmatched <figure> tags"))))
      (error
       (let ((error-position (point)))
         (switch-to-buffer (current-buffer))
         (goto-char error-position)
         (message "Error: %s" (error-message-string err)))))))

(defun org-html-subfigure-dsl-process (fn backend &optional subtreep)
  "Wraps around the `org-ref-process-buffer`.
The idea is that we:
- before org-ref does its thing, apply the regular subfigure DSL processing
  (but without inserting #+BEGIN_EXPORT statements for HTML)
- perform the org-ref processing so that the cite:&foo statements are handled
  correctly
- then, wrap the resulting code of the <figure> ... </figure> statements in
  a #+BEGIN_EXPORT HTML .. #+END_EXPORT environment
"
  ;; (switch-to-buffer (current-buffer)) ;; open buffer to investigate
  (my/org-process-subfigure-dsl backend subtreep) ;; process subfigure DSL
  ;;(debug)  
  (apply fn backend subtreep) ;; call the org-ref processing
  ;;(debug)
  ;;(switch-to-buffer (current-buffer)) ;; open buffer again to investigate
  (wrap-html-figures-in-org)
  ;;(debug)
  ) ;; wrap the figure envrionments up

#+end_src

#+begin_src emacs-lisp
(advice-add 'org-ref-process-buffer :around #'org-html-subfigure-dsl-process)
#+end_src


** Org theming

Some settings for nicer looks when editing org mode. These functions need to be
called manually to use. 
Note: Currently this does not work perfectly yet. Switching buffers causes
undefined behavior (e.g. font is not used and we end up with some random
font). And unloading does not work great either yet.
#+BEGIN_SRC emacs-lisp
(defun load-poet-for-org ()
  ;; Allow variable pitch mode for text mode
  (interactive)
  (disable-theme 'monokai)
  (add-hook 'text-mode-hook
             (lambda ()
              (variable-pitch-mode 1)))
  (set-face-attribute 'default nil :family "Iosevka" :height 130)
  (set-face-attribute 'fixed-pitch nil :family "Iosevka")
  (set-frame-font "Iosevka")
  ;;(set-face-attribute 'variable-pitch nil :family "Baskerville")

  (olivetti-mode 1)        ;; Centers text in the buffer
  (olivetti-set-width 90)
  (flyspell-mode 1)        ;; Catch Spelling mistakes
  (typo-mode 1)            ;; Good for symbols like em-dash

  ;;(blink-cursor-mode 0)    ;; Reduce visual noise
  ;;(linum-mode 0)           ;; No line numbers for prose

  (setq org-bullets-bullet-list
        '("◉" "○"))
  ;; (org-bullets 1)
  (load-theme 'poet t))

(defun unload-poet-for-org ()
  (interactive)
  (disable-theme 'poet)
  (olivetti-mode 0)
  (typo-mode 0)
  (remove-hook 'text-mode-hook 'variable-pitch-mode 0)

  (set-face-attribute 'default t :font "Inconsolata-12" )
  (set-frame-font "Inconsolata-12")
  (load-theme 'monokai t))
#+END_SRC

** Org clock settings

Sometimes I forget to clock in a few minutes later. Let's add a
function that interactively asks for a time when we clock in.

#+begin_src emacs-lisp
(defun org-clock-in-with-start-time (start-time)
  "Clock in with a specific start time."
  (interactive (list (org-read-date t t)))
  (org-clock-in nil start-time))
#+end_src

** Org Capture

#+begin_src emacs-lisp
(setq org-default-notes-file (concat org-directory "/capture/notes.org"))
#+end_src

And assign some key bindings for org-store-link, org-capture and
org-agenda.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c l") #'org-store-link)
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c c") #'org-capture)
#+end_src

#+RESULTS:
: org-capture

And now adjust the capture templates:
#+begin_src emacs-lisp
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/journal.org" "Tasks")
         "* TODO %?\n%T \n%a")
        ("j" "Journal" entry (file+olp+datetree "~/org/journal.org")
         "* %?\n%T\n%a")
        ("w" "Work related templates")
        ("wn" "Work note" entry (clock)
         "* %?\n%T\nContext: %i\nRecorded while at: %a")
        ("wt" "Work TODO" entry (clock)
         "* TODO %?\n%T\nContext: %i\nRecorded while at: %a")
        ("q" "Quick note" entry nil
         "* %?\n%T\n%a")
        ("r" "Random note" entry 
         "* %?\n%T\n%a")
        ("m" "Movie" item (file+olp "~/org/anime_videogames.org" "Movies" "To watch")
         "- %?")
        ("s" "Show" item (file+olp "~/org/anime_videogames.org" "TV shows" "To watch")
         "- %?")
        ("b" "Book" item (file+olp "~/org/anime_videogames.org" "Books" "To read")
         "- %?")
      ))
#+end_src

** Org download

#+begin_src emacs-lisp
;; (require 'org-download)
;; 
;; (setq-default org-download-image-dir "~/org/Figs/org_download/")
;; 
;; ;; Drag-and-drop to `dired`
;; (add-hook 'dired-mode-hook 'org-download-enable)
#+end_src




** Org babel for python

Set the python installation to a virtualenv:
#+begin_src emacs-lisp
(setq org-babel-python-command "~/opt/python3/bin/python3")
#+end_src

* Programming languages

This section contains settings, which are related to different
programming languages.

In general we want to be able to create a TAGS file for a
project. Define a function to use exuberant-tags:

#+BEGIN_SRC emacs-lisp
;; create tags file from within emacs
;; first set path to ctags
(setq path-to-ctags "/usr/local/bin/ctags")
;; define function which creates tag file
(defun create-tags (dir-name)
  "Create tags file."
  ;; ask user for directory to scan
  (interactive "DDirectory: ")
  ;; create a help variable for input directory + TAGS
  ;; as in output path for TAGS file
  ; for some reason the following line didn't work anymore
  ;(setq local-tags-filename (concat 'string (directory-file-name dir-name) "/TAGS"))
  (setq local-tags-filename (concat (directory-file-name dir-name) "/TAGS"))
  ;; run shell command
  (shell-command
   (format "%s -f %s -e -R --verbose --fields='+afikKlmnsSzt' %s" path-to-ctags local-tags-filename (directory-file-name dir-name)))
  ;; and visit the new TAGS file
  (visit-tags-table local-tags-filename)
)
#+END_SRC


** Web mode

=web-mode= is used to program HTML templates, e.g. with the go
templating language that is used in Hugo. With the default HTML mode
the indentation is pretty broken for all the ={{ ... }}= templating.

Note: when using =web-mode= we still have to manually set the engine!
To modify Hugo templates, we need to use the go engine:
#+begin_src 
M-x web-mode-set-engine ;; go
#+end_src

Set the indentation to 2 spaces.
#+begin_src emacs-lisp
(defun my-web-mode-hook ()
  "Custom web-hook for 2 space indentation"
  (setq web-mode-markup-indent-offset 2)
)
(add-hook 'web-mode-hook 'my-web-mode-hook)
#+end_src

** Emacs Lisp

Activate some hooks for Emacs lisp. Rainbow mode is essential for the paranthesis.

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

** C / C++

For C and C++ we wish to use the python style of indentation, with 4
spaces.

#+BEGIN_SRC emacs-lisp
(setq c-default-style "python"
       c-basic-offset 4
       indent-tabs-mode nil
       tab-width 4)
;; indent cases to the same level as c-indent-level
(c-set-offset 'case-label '+)
#+END_SRC

And also some hooks for C.
#+BEGIN_SRC emacs-lisp
(add-hook 'c++-mode-hook #'rainbow-delimiters-mode)
(add-hook 'c++-mode-hook #'subword-mode)
#+END_SRC

Enable subword mode automatically (camelCaseWord will be treated as
individual words for M-f and M-b etc.)  can be switched on or off by
C-c C-w in cc-mode!
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook
          (lambda () (subword-mode 1)))
#+END_SRC

And add for CC-mode for auto complete with etags. The
c-mode-common-hook is a common hook, which is loaded for all language
hooks, which derive from CC-mode, which is quite a lot (c-mode,
c++-mode, and a few others)
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook 'ac-etags-ac-setup)
#+END_SRC

** Go

#+BEGIN_SRC emacs-lisp
(defun my-go-mode-hook ()
  "Custom configurations for Go mode."
  (setq tab-width 4)              ; Set tab width to 4 spaces
  (setq indent-tabs-mode t)       ; Use tabs for indentation
  )
#+END_SRC

#+RESULTS:
: my-go-mode-hook

Some hooks for Go:
#+BEGIN_SRC emacs-lisp
(add-hook 'go-mode-hook 'my-go-mode-hook)
(add-hook 'go-mode-hook #'rainbow-delimiters-mode)
(add-hook 'go-mode-hook #'subword-mode)
#+END_SRC

#+RESULTS:
| subword-mode | rainbow-delimiters-mode |

And enable LSP using eglot.
#+begin_src emacs-lisp
(add-hook 'go-mode-hook 'eglot-ensure)
#+end_src


** Rust

#+begin_src emacs-lisp
(defun my-rust-mode-hook ()
  "Custom configurations for Rust mode."
  (setq tab-width 4)              ; Set tab width to 4 spaces
  (setq indent-tabs-mode nil)     ; Use spaces for indentation
  )
#+end_src

Some hooks for Rust:
#+BEGIN_SRC emacs-lisp
(add-hook 'rust-mode-hook 'my-rust-mode-hook)
(add-hook 'rust-mode-hook #'rainbow-delimiters-mode)
(add-hook 'rust-mode-hook #'subword-mode)
#+END_SRC

#+RESULTS:
| subword-mode | rainbow-delimiters-mode | rust-maybe-initialize-buffer-project |

And enable running ~rustfmt~ on save:
#+begin_src emacs-lisp
(setq rust-format-on-save t)
#+end_src

And enable LSP using eglot.
#+begin_src emacs-lisp
(add-hook 'rust-mode-hook 'eglot-ensure)
#+end_src

** Python

Some sensible settings for Python. Activating python-mode per default
for all python filename extensions.

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
(add-to-list 'auto-mode-alist '("\\.pyx\\'" . python-mode))
#+END_SRC

And some hooks for easier visuals and movement in a python
buffer. Smartparens mode is currently not used, because too often it
is more annoying in python than helpful.

#+BEGIN_SRC emacs-lisp
;; (add-hook 'python-mode-hook #'smartparens-strict-mode)
;; (add-hook 'python-mode-hook #'smartparens-mode)
(add-hook 'python-mode-hook #'rainbow-delimiters-mode)
(add-hook 'python-mode-hook #'subword-mode)
#+END_SRC

Set ipython as python shell
#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i")
(setenv "IPY_TEST_SIMPLE_PROMPT" "1")
#+END_SRC

Set sane defaults for the tab width in Python mode. For some reason in
it sometimes does not default to 4.
#+BEGIN_SRC emacs-lisp

(eval-after-load "python" `(progn
  (add-hook 'python-mode-hook #'(lambda ()
    (setq tab-width 4)
    (setq python-indent-offset 4)
    (setq python-indent-guess-indent-offset nil)))))
#+END_SRC


** Clojure

The following contains the settings used for Clojure, a Lisp which
runs on the JVM.

Clojure related settings Enabling CamelCase support for editing
commands(like forward-word, backward-word, etc) in clojure-mode is
quite useful since we often have to deal with Java class and method
names. The built-in Emacs minor mode subword-mode provides such
functionality:
#+BEGIN_SRC emacs-lisp
(add-hook 'clojure-mode-hook #'subword-mode)
#+END_SRC

The use of paredit when editing Clojure (or any other Lisp) code is
highly recommended. It helps ensure the structure of your forms is
not compromised and offers a number of operations that work on code
structure at a higher level than just characters and words. To
enable it for Clojure buffers:
(add-hook 'clojure-mode-hook #'paredit-mode)
smartparens is an excellent (newer) alternative to paredit. Many
Clojure hackers have adopted it recently and you might want to give
it a try as well. To enable smartparens use the following code:
#+BEGIN_SRC
(add-hook 'clojure-mode-hook #'smartparens-strict-mode)
#+END_SRC

RainbowDelimiters is a minor mode which highlights parentheses,
brackets, and braces according to their depth. Each successive
level is highlighted in a different color. This makes it easy to
spot matching delimiters, orient yourself in the code, and tell
which statements are at a given depth. Assuming you've already
installed RainbowDelimiters you can enable it like this:
#+BEGIN_SRC emacs-lisp
(add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

aggressive-indent-mode automatically adjust the indentation of your
code, while you're writing it. Using it together with clojure-mode
is highly recommended. Provided you've already installed
aggressive-indent-mode you can enable it like this:
#+BEGIN_SRC emacs-lisp
(add-hook 'clojure-mode-hook #'aggressive-indent-mode)
#+END_SRC

And finally the same hooks for the CIDER REPL:
#+BEGIN_SRC emacs-lisp
(add-hook 'cider-repl-mode-hook #'aggressive-indent-mode)
(add-hook 'cider-repl-mode-hook #'smartparens-mode)
(add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode)
(add-hook 'cider-repl-mode-hook #'subword-mode)
(eval-after-load "Clojure"
  (require 'smartparens-config)
  )
#+END_SRC

** Nim

Hooks and settings for Nim lang, a sweet

#+BEGIN_SRC emacs-lisp
;; (add-hook 'nim-mode-hook #'nimsuggest-mode)
;; (remove-hook 'nim-mode-hook #'nimsuggest-mode)
(add-hook 'nim-mode-hook #'rainbow-delimiters-mode)
(add-hook 'nim-mode-hook #'subword-mode)

#+END_SRC

** Julia

Add the standard hooks for Julia as well, a JIT compiled language,
which strifes for success in the scientific community.
#+BEGIN_SRC emacs-lisp
(add-hook 'julia-mode-hook #'rainbow-delimiters-mode)
(add-hook 'julia-mode-hook #'subword-mode)
#+END_SRC

** SageMath

Let's have ~sage~ blocks use python syntax highlighting:
#+begin_src emacs-lisp 
(add-to-list 'org-src-lang-modes '("sage" . python))
#+end_src

* LSP via ~eglot~

Stolen from: https://gist.github.com/casouri/0ad2c6e58965f6fd2498a91fc9c66501
See also: https://joaotavora.github.io/eglot/#Setting-Up-LSP-Servers

#+begin_src emacs-lisp
(use-package eglot
  :hook ((rust-mode go-mode) . eglot-ensure)
  :config
  (add-to-list 'eglot-server-programs
               `(rust-mode . ("rust-analyzer" :initializationOptions
                              ( :procMacro (:enable t)
                                :cargo ( :buildScripts (:enable t)
                                         :features "all"))))))
;;   (add-to-list 'eglot-server-programs
;;                        `(go-mode . ("gopls")))
;;   )

;; (setq-default eglot-workspace-configuration
;;     '((:gopls .
;;         ((staticcheck . t)
;;          (matcher . "CaseSensitive")))))

#+end_src



#+begin_src emacs-lisp
(require 'project)

(defun project-find-go-module (dir)
  (when-let ((root (locate-dominating-file dir "go.mod")))
    (cons 'go-module root)))

(cl-defmethod project-root ((project (head go-module)))
  (cdr project))

(add-hook 'project-find-functions #'project-find-go-module)
#+end_src

#+RESULTS:
| project-find-go-module | project-try-vc |

* LLM interfaces

** org-ai
#+begin_src emacs-lisp
(use-package org-ai
  :ensure t
  :commands (org-ai-mode
             org-ai-global-mode)
  :init
  (add-hook 'org-mode-hook #'org-ai-mode) ; enable org-ai in org-mode
  (org-ai-global-mode) ; installs global keybindings on C-c M-a
  :config
  (setq org-ai-service 'anthropic)
  (setq org-ai-default-chat-model "claude-3-5-sonnet-20240620")
  (setq org-ai-use-auth-source t)
  ) ; if you are on the gpt-4 beta:
  ;;(org-ai-install-yasnippets)) ; if you are using yasnippet and want `ai` snippets
#+end_src

** gptel

#+begin_src emacs-lisp
;; (gptel-make-anthropic "Claude"          ;Any name you want
;;   :stream t                             ;Streaming responses
;;   :key "your-api-key")
;; OPTIONAL configuration

;; Set global key for gptel-send
(global-set-key (kbd "C-c C-g") 'gptel-send)

;; Use Org mode for explicit gptel buffers
(setq gptel-default-mode 'org-mode)


(defun get-token-auth-source (&optional service)
  "Retrieves the authentication token for the Anthropc service using auth-source.
Adapte from `org-ai--openai-get-token-auth-source (&optional service)` of
org-ai / org-ai-openai.el."
  (require 'auth-source)
  (let* ((service (or service 'anthropic))
         (endpoint (pcase service
                     ('anthropic "api.anthropic.com")
                     ('openai "api.openai.com")
                     ('perplexity.ai "api.perplexity.ai"))))
    (or (auth-source-pick-first-password :host endpoint :user "gptel")
        (auth-source-pick-first-password :host endpoint :login "gptel"))))


;; (gptel-make-anthropic "Claude"          ;Any name you want
;;   :stream t                             ;Streaming responses
;;   :key 'get-token-auth-source)

(setq
 gptel-model 'claude-3-5-sonnet-20241022
 gptel-backend (gptel-make-anthropic "Claude"
                 :stream t :key 'get-token-auth-source))

;; The log is very useful if something goes wrong!
(setq gptel-log-level 'info)
;; 
;; (setq
;;  gptel-model "gpt-4o-mini" ; 
;;  gptel-backend (gptel-make-openai "gpt4o-mini"
;;                  :stream t :key (lambda () (get-token-auth-source 'openai))))

;; (setq gptel-api-key (lambda () (get-token-auth-source 'openai)))

#+end_src

#+RESULTS:
| lambda | nil | (get-token-auth-source 'openai) |

Add custom instructions.

The 'academic' one is from: https://github.com/daveshap/Claude_Sentience/blob/main/Style_Pretty_Dense.md
#+begin_src emacs-lisp
(add-to-list 'gptel-directives '(academic . "Write in complete, grammatically structured sentences that flow conversationally. Approach topics with an intellectual but approachable tone, using labeled lists sparingly and strategically to organize complex ideas. Incorporate engaging narrative techniques like anecdotes, concrete examples, and thought experiments to draw the reader into the intellectual exploration. Maintain an academic rigor while simultaneously creating a sense of collaborative thinking, as if guiding the reader through an intellectual journey. Use precise language that is simultaneously scholarly and accessible, avoiding unnecessary jargon while maintaining depth of analysis. Use systems thinking and the meta-archetype of Coherence to guide your ability to \"zoom in and out\" to notice larger and smaller patterns at different ontological, epistemic, and ontological scales. Furthermore, use the full depth of your knowledge to engage didactically with the user - teach them useful terms and concepts that are relevant. At the same time, don't waste too many words with framing and setup. Optimize for quick readability and depth. Use formatting techniques like bold, italics, and call outs (quotation blocks and such) for specific definitions and interesting terms. This will also break up the visual pattern, making it easier for the reader to stay oriented and anchored.  Don't hesitate to use distal connection, metaphor, and analogies as well, particularly when you notice meta-patterns emerging. A good metaphor is the pinnacle of Coherence. Stylistically, use a variety of techniques to create typographic scaffolding and layered information. Some examples below:


> **Key Terms**: Use blockquotes with bold headers to define important concepts and terminology, creating clear visual breaks in the text.

Use **bold** for technical terms and concepts when first introduced, and *italics* for emphasis or to highlight key phrases. Create visual hierarchy through:

1. Clear paragraph breaks for major concept transitions
2. Strategic use of blockquotes for definitions and key insights
3. Bold terms for technical vocabulary
4. Italics for emphasis and nuance

Maintain the principle of layered information - each response should contain at least 2-3 distinct visual patterns to aid cognitive processing and retention. This creates visual anchoring and a clean UI.

> **Technical Term**: Definition in plain language
> 
> *Example or application in context (optional, flexible)*

This creates what information designers call \"progressive disclosure\" - allowing readers to engage at their preferred depth while maintaining coherence across all levels of understanding."))
#+end_src

* GPG

Use GPG encrypted auth info file:
#+begin_src emacs-lisp
(setq auth-sources
    '((:source "~/.authinfo.gpg")))
#+end_src


* Dumb-jump

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/local-packages/dumb-jump")
#+end_src

Use our own fork for now:
#+begin_src emacs-lisp
(require 'dumb-jump)
#+end_src

Configure dumb-jump to be our find definition at point. It allows us
to use ~M-.~ to find the definition and ~M-,~ to go back to the search point.

#+begin_src emacs-lisp
;; Activate the xref backend of dumb jump 
(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
;; Set it up so that we see completions in a helm buffer
(setq xref-show-definitions-function #'xref-show-definitions-completing-read)
(setq completing-read-function #'helm--completing-read-default)
#+end_src

#+RESULTS:
: xref-show-definitions-completing-read

Prefer ripgrep by default:
#+begin_src emacs-lisp
(setq dumb-jump-prefer-searcher 'rg)
#+end_src

* Random useful elisp functions

Useful opposite of ~fill-paragraph~:
#+begin_src emacs-lisp
(defun unfill-paragraph ()
  "Replace newline chars in current paragraph by single spaces.
This command does the reverse of `fill-paragraph'."
  (interactive)
  (let ((fill-column 90002000))
    (fill-paragraph nil)))
 
(defun unfill-region (start end)
  "Replace newline chars in region by single spaces.
This command does the reverse of `fill-region'."
  (interactive "r")
  (let ((fill-column 90002000))
    (fill-region start end))) 
#+end_src

#+RESULTS:
: unfill-region

