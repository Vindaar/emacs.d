
* About


This is my emacs init.el file written in org-mode. Everything in here
is loaded by org-babel-load-file in the actual init.el, which then
takes out all source blocks, creates a myinit.el file, which is executed.


* Install packages

First of all we want to make sure we have all packages installed. Thus
using use-package and a list of packages we currently use, install
them:

#+BEGIN_SRC emacs-lisp
(require 'use-package)
(setq use-package-always-ensure t)

(setq my-packages '(htmlize
                    which-key
                    ob-nim
                    ;;org
                    ;;org-ac
                    ein
                    nim-mode
                    ;; pixie-mode
                    undo-tree
                    magit
                    gnuplot-mode
                    ;; hy-mode
                    smartparens
                    cider
                    clojure-mode
                    yasnippet
                    wgrep-helm
                    spacemacs-theme
                    spaceline
                    smart-mode-line-powerline-theme
                    rainbow-delimiters
                    monokai-theme
                    julia-mode
                    go-mode
                    go-autocomplete
                    edit-server
                    auto-complete-exuberant-ctags
                    auctex
                    aggressive-indent
                    ac-helm
                    ac-etags
                    avy
                    swiper
                    transpose-frame
                    ;; poet-theme
                    ;; olivetti
                    typo
                    mozc
                    web-mode ;; to program HTML templates
                    yaml-mode
                    xah-math-input
))
#+END_SRC

Iterate over all packages and call use-package with it:
#+BEGIN_SRC emacs-lisp
(dolist (p my-packages)
  (if (not (package-installed-p p))
    (progn 
      (message "Installing %s" p)
      (package-install p))
    (message "Already installed %s" p)))
#+END_SRC


* Interface and general emacs settings

This part contains settings, which are related to the user interface,
i.e. line numbering and also some general settings, we don't or do want.

#+BEGIN_SRC emacs-lisp
;; disable the startup screen
(setq inhibit-startup-screen t)

;; enable line and column numbering at bottom right of buffer
(setq line-number-mode t
      column-number-mode t)

;; disable tabs as indentation (spaces only)
(setq-default indent-tabs-mode nil)

;; disable upcase region
(put 'upcase-region 'disabled nil)

;; activate true fullscreen mode
;; old way to activate full screen
;; (defun fullscreen ()
;;        (interactive)
;;        (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
;;                               '(2 "_NET_WM_STATE_FULLSCREEN" 0)))

(defun toggle-fullscreen ()
  "Toggle full screen on X11"
  (interactive)
  (when (eq window-system 'x)
    (set-frame-parameter
     nil 'fullscreen
     (when (not (frame-parameter nil 'fullscreen)) 'fullboth))))
(global-set-key [f11] 'toggle-fullscreen)

;; always show full path to file in title bar
(setq frame-title-format
      (list (format "%s %%S: %%j " (system-name))
            '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))

;;(set-face-attribute 'mode-line nil
;;                      :foreground "Black"
;;                      :background "DarkOrange"
;;                     :box nil)

#+END_SRC

Emacs shall start an edit-server, in case none was started yet, so we
can e.g. access emacs from Chrome (for editing text fields):
#+BEGIN_SRC emacs-lisp
(require 'edit-server)
(edit-server-start)
#+END_SRC


We want to use auto-complete via ac all the time, so activate that:
#+BEGIN_SRC emacs-lisp
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/lisp/ac-dict")
(ac-config-default)
;; and enable auto completion for etags
(eval-after-load "etags"
  '(progn
      (ac-etags-setup)))
#+END_SRC


Set up ssh to be used by tramp as default, instead of scp. This is
much more performant.
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC


Add ./lisp folder to load-path
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp")    ; This may not be appeared if you have already added.
#+END_SRC

The following contains the settings related to themes.
#+BEGIN_SRC emacs-lisp

;; powerline related
;; (setq powerline-arrow-shape 'curve)
;; (setq powerline-default-separator-dir '(right . left))
;; ;; These two lines you really need.
;; (setq sml/theme 'respectful)
;; (sml/setup)

;; load spacemacs theme
;;(load-theme 'spacemacs-dark t)

;; load the spaceline modeline theme
(require 'spaceline-config)
(spaceline-emacs-theme)

;; fix broken colors in powerline
(setq ns-use-srgb-colorspace nil)
(setq powerline-default-separator 'utf-8)

(load-theme 'monokai t)

;; disable menu, tool bar and scroll-bar
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

Change the default font to Inconsolata:
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default t :font "Inconsolata-12" )
(set-frame-font "Inconsolata-12")
#+END_SRC

Some more general settings for some modes:

Enable auto-fill-mode for every text buffer automatically.
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

Set the regex builder syntax from 'read' to 'string' so that we don't
have to use double backslash.
#+BEGIN_SRC emacs-lisp
(setq reb-re-syntax 'string)
#+END_SRC


Exchange isearch with swiper and set a couple of settings (taken from
the config example https://github.com/abo-abo/swiper).
#+BEGIN_SRC emacs-lisp
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
(global-set-key (kbd "C-s") 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
#+END_SRC

Set some avy-mode keybindings.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-:") 'avy-goto-char)
(global-set-key (kbd "C-'") 'avy-goto-char-2)
(global-set-key (kbd "M-g w") 'avy-goto-word-1)
(global-set-key (kbd "M-g e") 'avy-goto-word-0)
#+END_SRC

Set a keybinding for transpose-frame to switch from a vertical to a
horizontal split or vice versa:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x |") 'transpose-frame)
#+END_SRC

Add global hook to always remove trailing whitespaces in buffers upon
saving them. Note: in some cases, e.g. Markdown this might not be
desired, since a double whitespace at the end of a line has special
meaning?
Thus, define function derived from =delete-trailing-whitespace=, which
checks for the current major mode.
#+BEGIN_SRC emacs-lisp
(defun delete-trailing-whitespace-no-org-mode ()
  (when (not (eq major-mode 'org-mode))
    (delete-trailing-whitespace)))
#+END_SRC
Now add the custom hook.
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace-no-org-mode)
#+END_SRC

Change the keybinding for =other-window= and define a =prev-window=
command:
#+BEGIN_SRC emacs-lisp
(defun prev-window ()
  (interactive)
  (other-window -1))
#+END_SRC
And define the window moving commands
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-.") #'other-window)
(global-set-key (kbd "C-,") #'prev-window)
#+END_SRC

Set cycle-spacing to M-Spc to get rid of many spaces at once:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-SPC") #'cycle-spacing)
#+END_SRC

Set some bindings to make move to beginning / end of buffer work with
neo2:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-–") #'beginning-of-buffer)
(global-set-key (kbd "M-•") #'end-of-buffer)
#+END_SRC

Finally set a keybinding for =undo= to have it on the same physical
keys:
#+BEGIN_SRC emacs-lisp
(bind-key* "C-j" 'undo)
#+END_SRC

Activate =xah-math-mode= globally and change it's default key binding:
#+begin_src emacs-lisp
(require 'xah-math-input)
(global-xah-math-input-mode 1)
(define-key xah-math-input-keymap (kbd "S-SPC") nil) ; unset Shift+space 
(define-key xah-math-input-keymap (kbd "s-i") 'xah-math-input-change-to-symbol)
#+end_src

** Expansion

Use =hippie-expand= for expansion by default:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-/") #'hippie-expand)
#+END_SRC

** Window splitting

Change the definition of =split-window-sensibly= to prefer a vertial
over a horizontal split. Function is defined in =window.el=. Use our
definition instead:
#+BEGIN_SRC emacs-lisp
(defun my-split-window-sensibly (&optional window)
  "Custom variant of split-window-sensibly, which prefers to split the
   windows vertically instead of horizontally"
  (let ((window (or window (selected-window))))
    (or (and (window-splittable-p window t)
             ;; Split window vertically.
             (with-selected-window window
           (split-window-right)))
        (and (window-splittable-p window)
             ;; Split window horizontally.
             (with-selected-window window
               (split-window-below)))
        (and
         ;; If WINDOW is the only usable window on its frame (it is
         ;; the only one or, not being the only one, all the other
         ;; ones are dedicated) and is not the minibuffer window, try
         ;; to split it vertically disregarding the value of
         ;; `split-height-threshold'.
         (let ((frame (window-frame window)))
           (or
            (eq window (frame-root-window frame))
            (catch 'done
              (walk-window-tree (lambda (w)
                                  (unless (or (eq w window)
                                              (window-dedicated-p w))
                                    (throw 'done nil)))
                                frame)
              t)))
         (not (window-minibuffer-p window))
         (let ((split-height-threshold 0))
           (when (window-splittable-p window)
             (with-selected-window window
               (split-window-below))))))))
#+END_SRC

And now choose it for the window spliting function:
#+BEGIN_SRC emacs-lisp
(setq split-window-preferred-function 'my-split-window-sensibly)
#+END_SRC


** XMonad specific settings

Set the emacs exec-path to the normal PATH variable.
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (getenv "PATH"))
#+END_SRC



* TeX related settings
This part contains settings related to LaTeX. Most TeX related
settings can be found in the custom.el, because they are written
automatically by emacs (AucTeX)
#+BEGIN_SRC emacs-lisp
;; load auctex
;; (load "auctex.el" nil t t)
;(load "preview-latex.el" nil t t)
;; set auctex to PDF mode (uses pdflatex)
(setq TeX-PDF-mode t)
#+END_SRC

And activate rainbow-delimiters for LaTeX code:
#+BEGIN_SRC emacs-lisp
(add-hook 'TeX-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

Use =xelatex= by default:
#+begin_src emacs-lisp
(setq-default TeX-engine 'xetex)
#+end_src

And make sure ghostscript path is correct:
#+begin_src emacs-lisp
(setq preview-gs-command "/bin/gs")
#+end_src

Change the =org-preview-latex-process-alist= to use =xelatex= as well
and the DVI -> SVG backend.
#+begin_src emacs-lisp
(setq org-preview-latex-process-alist
      '((dvipng :programs
                ("xelatex" "dvipng")
                :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "xdv" :image-output-type "png" :image-size-adjust
                (1.0 . 1.0)
                :latex-compiler
                ("xelatex --shell-escape -no-pdf -interaction nonstopmode -output-directory %o %f")
                :image-converter
                ("dvipng -D %D -T tight -o %O %f"))
        (dvisvgm :programs
                 ("xelatex" "dvisvgm")
                 :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :image-input-type "xdv" :image-output-type "svg" :image-size-adjust
                 (1.7 . 1.5)
                 :latex-compiler
                 ("xelatex --shell-escape -no-pdf -interaction nonstopmode -output-directory %o %f")
                 :image-converter
                 ("dvisvgm %f -n -b min -c %S -o %O"))
        (imagemagick :programs
                     ("xelatex" "convert")
                     :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :image-input-type "pdf" :image-output-type "png" :image-size-adjust
                     (1.0 . 1.0)
                     :latex-compiler
                     ("xelatex --shell-escape -interaction nonstopmode -output-directory %o %f")
                     :image-converter
                     ("convert -density %D -trim -antialias %f -quality 100 %O"))))
(setq org-preview-latex-default-process 'dvisvgm)
#+end_src

* Helm

Helm. Really an emacs package in a league of its own:
https://tuhdo.github.io/helm-intro.html

#+BEGIN_SRC emacs-lisp
(require 'helm)
(require 'helm-config)
#+END_SRC

The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
Changed to "C-c h". Note: We must set "C-c h" globally, because we
cannot change `helm-command-prefix-key' once `helm-config' is loaded.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c h") 'helm-command-prefix)
;; (global-unset-key (kbd "C-x c"))
;; instead of using standard M-x, use helm-M-x instead
(global-set-key (kbd "M-x") 'helm-M-x)
;; instead of using standard kill ring, use helm show kill ring
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
;; use helm-mini as buffer selection (can use regexps etc!)
(global-set-key (kbd "C-x b") 'helm-mini)
;; and enable fuzzy matching for it
(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)
;; use helm to find files as well
(global-set-key (kbd "C-x C-f") 'helm-find-files)
;; change key binding for helm occur
(global-set-key (kbd "C-c h o") 'helm-occur)
(global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
#+END_SRC


Activate helm for autocomplete and set keys.
#+BEGIN_SRC emacs-lisp
(require 'ac-helm)  ;; Not necessary if using ELPA package
(global-set-key (kbd "C-;") 'ac-complete-with-helm)
(define-key ac-complete-mode-map (kbd "C-;") 'ac-complete-with-helm)
#+END_SRC

define tab as helm execute persitent action (i.e. during file search
select highlighted, similar to tab completion in those cases)
#+BEGIN_SRC emacs-lisp
(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i")   'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-z")   'helm-select-action) ; list actions using C-z
#+END_SRC

Enable fuzzy mode for semantic
#+BEGIN_SRC emacs-lisp
(setq helm-semantic-fuzzy-match t
      helm-imenu-fuzzy-match    t)
#+END_SRC

Activate auto resizing of helm window
#+BEGIN_SRC emacs-lisp
(helm-autoresize-mode t)
(helm-mode 1)
#+END_SRC

Set helm-complete-filename-at-point to 'Alt+\', which can be used to
expand a filename given at point to its full system path. Really
useful in cases where one suddenly wants the full path from the
current relative path given.
#+BEGIN_SRC emacs-lisp
(global-set-key "\M-\\" 'helm-complete-file-name-at-point)
#+END_SRC


* Org mode


#+BEGIN_SRC emacs-lisp
(require 'org)
#+END_SRC

Disable the =C-'= binding for org-mode, since this conflicts with
avy-goto-char-2 and C-, (=org-cycle-agenda-files=) since it conflicts
with our mapping of =prev-window=.
#+BEGIN_SRC emacs-lisp
(define-key org-mode-map (kbd "C-'") nil)
(define-key org-mode-map (kbd "C-,") nil)
#+END_SRC

Increase size of latex formulas preview in org-mode
#+BEGIN_SRC emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+END_SRC

When exporting org tables to LaTeX, we want the caption to be placed
below the table, instead of above.
#+BEGIN_SRC emacs-lisp
(setq org-latex-caption-above nil)
#+END_SRC

We want to default org-mode to the indented style.
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC

Load source code support for org mode for some so far used languages.
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (C . t)
   (shell . t)))
#+END_SRC

Fontify source blocks (enable syntax highlighting of source code)
and set indentation to normal source code indentation
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil
      org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-src-preserve-indentation t)
#+END_SRC


Define additional org mode faces
#+BEGIN_SRC emacs-lisp
(setq org-todo-keyword-faces
      '(
        ("TODO" . (:foreground "#F92672" :weight bold))
        ("STARTED" . (:foreground "purple" :weight bold))
        ("WAITING" . (:foreground "yellow" :weight bold))
        ("MAYBE" . (:foreground "orange" :weight bold))
        ("WONTFIX" . (:foreground "wheat" :weight bold))
        ("DONE" . (:foreground "#A6E22E" :weight bold))
        ))

(setq org-todo-keywords
      '((sequence "TODO" "STARTED" "WAITING" "MAYBE" "|" "DONE" "WONTFIX")))
#+END_SRC

Add some files to org-agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/org/journal.org"))
(setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
#+END_SRC


The following could also be placed in the interface part, but since
it's related to org-mode, it's here. Used to change the sizes of the
headings in an org-mode file, to reduce the sizes slightly.

NOTE: For some reason after updating all packages on
<2019-08-12 Mon 19:10>, the font size modification turned out to make
everything a lot smaller than I intended. Now using the default values
seems correct. Weird.
#+BEGIN_SRC emacs-lisp
;; change sizes of headings in monokai theme for org-mode
;;(setq monokai-height-minus-1 0.7
;;      monokai-height-plus-1 0.8
;;      monokai-height-plus-2 0.85
;;      monokai-height-plus-3 0.9
;;      monokai-height-plus-4 0.95)

;; the following are the defaults
(setq monokai-height-minus-1 0.8
      monokai-height-plus-1 1.1
      monokai-height-plus-2 1.15
      monokai-height-plus-3 1.2
      monokai-height-plus-4 1.3)

#+END_SRC

** Flyspell-mode

To get spell checking in Org (well every text buffer), we use =flyspell-mode=. Activate it
whenever we use Org mode:
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'flyspell-mode)
#+end_src

Set up flyspell to use =aspell= and define the =--list= command to not
be =-l= (=--lang= in aspell):
#+begin_src emacs-lisp
(setq ispell-program-name "/bin/aspell")
(setq ispell-list-command "--list")
#+end_src
Ref: https://www.emacswiki.org/emacs/FlySpell#h5o-8

Rebind the auto correct and next error bindings for =flyspell-mode=,
since they collide with our change buffer window key bindings.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (flyspell-mode)
            (define-key flyspell-mode-map (kbd "C-.") nil)
            (define-key flyspell-mode-map (kbd "C-,") nil)
            ;; (define-key flyspell-map (kbd "C-.") 'flyspell-auto-correct-word)
            ;; (define-key flyspell-map (kbd "C-,") 'flyspell-goto-next-error)
            )
          )
#+end_src


** Export settings
These settings are specifically related to exporting org-mode files to
HTML, LaTeX etc.

Note: following currently not in use. Added to header of org file
instead, since the following doesn't work. FIXIT
Include siunitx by default for LaTeX fragments:
#+BEGIN_SRC emacs-lisp
;; (setq org-format-latex-header (plist-put org-format-latex-header "\\usepackage{siunitx}"))
#+END_SRC

Set HTML export such that it can work with siunitx:
#+BEGIN_SRC emacs-lisp
;; modify path and mathml
(setq org-html-mathjax-options
  '((path "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML")
    (scale "100")
    (align "center")
    (indent "2em")
    (mathml t)))

(setq org-html-mathjax-template
              "
<script type=\"text/javascript\" src=\"%PATH\"></script>
<script type=\"text/javascript\">
<!--/*--><![CDATA[/*><!--*/
    MathJax.Hub.Config({
        jax: [\"input/TeX\", \"output/HTML-CSS\"],
        extensions: [\"tex2jax.js\",\"TeX/AMSmath.js\",\"TeX/AMSsymbols.js\",
                     \"TeX/noUndefined.js\", \"[Contrib]/siunitx/siunitx.js\", \"[Contrib]/mhchem/mhchem.js\"],
        tex2jax: {
            inlineMath: [ [\"\\\\(\",\"\\\\)\"] ],
            displayMath: [ ['$$','$$'], [\"\\\\[\",\"\\\\]\"], [\"\\\\begin{displaymath}\",\"\\\\end{displaymath}\"] ],
            skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"pre\",\"code\"],
            ignoreClass: \"tex2jax_ignore\",
            processEscapes: false,
            processEnvironments: true,
            preview: \"TeX\"
        },
        TeX: {extensions: [\"AMSmath.js\",\"AMSsymbols.js\",  \"[Contrib]/siunitx/siunitx.js\", \"[Contrib]/mhchem/mhchem.js\"]},
        showProcessingMessages: true,
        displayAlign: \"%ALIGN\",
        displayIndent: \"%INDENT\",

        \"HTML-CSS\": {
             scale: %SCALE,
             availableFonts: [\"STIX\",\"TeX\"],
             preferredFont: \"TeX\",
             webFont: \"TeX\",
             imageFont: \"TeX\",
             showMathMenu: true,
        },
        MMLorHTML: {
             prefer: {
                 MSIE:    \"MML\",
                 Firefox: \"MML\",
                 Opera:   \"HTML\",
                 other:   \"HTML\"
             }
        }
    });
/*]]>*///-->
</script>")
#+END_SRC

Use the minted package to export org-babel code blocks. Also add some
options to print line numbers and use the monokai background color, if
defined. The monokai_bg color used here is (taken from an Org talk):
#+BEGIN_EXAMPLE
#+LATEX_HEADER: \definecolor{monokai_bg}{RGB}{39, 40, 34}
#+END_EXAMPLE
and to get minted to use the monokai theme, simply add:
#+BEGIN_EXAMPLE
#+LaTeX_HEADER: \usemintedstyle{monokai}
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)
(setq org-latex-minted-options
   '(("frame" "lines") ("linenos=true") ("bgcolor=monokai_bg")))
#+END_SRC

Now define pdflatex compilation commands used when =C-c C-e l P= is
pressed. NOTE: if we currently use =C-c C-c= from a LaTeX buffer
itself, we encounter an error, if the minted package is used (since it
needs the =shell-escape= option).
#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process
      '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

** Org theming

Some settings for nicer looks when editing org mode. These functions need to be
called manually to use. 
Note: Currently this does not work perfectly yet. Switching buffers causes
undefined behavior (e.g. font is not used and we end up with some random
font). And unloading does not work great either yet.
#+BEGIN_SRC emacs-lisp
(defun load-poet-for-org ()
  ;; Allow variable pitch mode for text mode
  (interactive)
  (disable-theme 'monokai)
  (add-hook 'text-mode-hook
             (lambda ()
              (variable-pitch-mode 1)))
  (set-face-attribute 'default nil :family "Iosevka" :height 130)
  (set-face-attribute 'fixed-pitch nil :family "Iosevka")
  (set-frame-font "Iosevka")
  ;;(set-face-attribute 'variable-pitch nil :family "Baskerville")

  (olivetti-mode 1)        ;; Centers text in the buffer
  (olivetti-set-width 90)
  (flyspell-mode 1)        ;; Catch Spelling mistakes
  (typo-mode 1)            ;; Good for symbols like em-dash

  ;;(blink-cursor-mode 0)    ;; Reduce visual noise
  ;;(linum-mode 0)           ;; No line numbers for prose

  (setq org-bullets-bullet-list
        '("◉" "○"))
  ;; (org-bullets 1)
  (load-theme 'poet t))

(defun unload-poet-for-org ()
  (interactive)
  (disable-theme 'poet)
  (olivetti-mode 0)
  (typo-mode 0)
  (remove-hook 'text-mode-hook 'variable-pitch-mode 0)

  (set-face-attribute 'default t :font "Inconsolata-12" )
  (set-frame-font "Inconsolata-12")
  (load-theme 'monokai t))
#+END_SRC

* Programming languages

This section contains settings, which are related to different
programming languages.

In general we want to be able to create a TAGS file for a
project. Define a function to use exuberant-tags:

#+BEGIN_SRC emacs-lisp
;; create tags file from within emacs
;; first set path to ctags
(setq path-to-ctags "/usr/local/bin/ctags")
;; define function which creates tag file
(defun create-tags (dir-name)
  "Create tags file."
  ;; ask user for directory to scan
  (interactive "DDirectory: ")
  ;; create a help variable for input directory + TAGS
  ;; as in output path for TAGS file
  ; for some reason the following line didn't work anymore
  ;(setq local-tags-filename (concat 'string (directory-file-name dir-name) "/TAGS"))
  (setq local-tags-filename (concat (directory-file-name dir-name) "/TAGS"))
  ;; run shell command
  (shell-command
   (format "%s -f %s -e -R --verbose --fields='+afikKlmnsSzt' %s" path-to-ctags local-tags-filename (directory-file-name dir-name)))
  ;; and visit the new TAGS file
  (visit-tags-table local-tags-filename)
)
#+END_SRC


** Web mode

=web-mode= is used to program HTML templates, e.g. with the go
templating language that is used in Hugo. With the default HTML mode
the indentation is pretty broken for all the ={{ ... }}= templating.

Note: when using =web-mode= we still have to manually set the engine!
To modify Hugo templates, we need to use the go engine:
#+begin_src 
M-x web-mode-set-engine ;; go
#+end_src

Set the indentation to 2 spaces.
#+begin_src emacs-lisp
(defun my-web-mode-hook ()
  "Custom web-hook for 2 space indentation"
  (setq web-mode-markup-indent-offset 2)
)
(add-hook 'web-mode-hook 'my-web-mode-hook)
#+end_src

** Emacs Lisp

Activate some hooks for Emacs lisp. Rainbow mode is essential for the paranthesis.

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

** C / C++

For C and C++ we wish to use the python style of indentation, with 4
spaces.

#+BEGIN_SRC emacs-lisp
(setq c-default-style "python"
       c-basic-offset 4
       indent-tabs-mode nil
       tab-width 4)
;; indent cases to the same level as c-indent-level
(c-set-offset 'case-label '+)
#+END_SRC

And also some hooks for C.
#+BEGIN_SRC emacs-lisp
(add-hook 'c++-mode-hook #'rainbow-delimiters-mode)
(add-hook 'c++-mode-hook #'subword-mode)
#+END_SRC

Enable subword mode automatically (camelCaseWord will be treated as
individual words for M-f and M-b etc.)  can be switched on or off by
C-c C-w in cc-mode!
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook
          (lambda () (subword-mode 1)))
#+END_SRC

And add for CC-mode for auto complete with etags. The
c-mode-common-hook is a common hook, which is loaded for all language
hooks, which derive from CC-mode, which is quite a lot (c-mode,
c++-mode, and a few others)
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook 'ac-etags-ac-setup)
#+END_SRC

** Python

Some sensible settings for Python. Activating python-mode per default
for all python filename extensions.

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
(add-to-list 'auto-mode-alist '("\\.pyx\\'" . python-mode))
#+END_SRC

And some hooks for easier visuals and movement in a python
buffer. Smartparens mode is currently not used, because too often it
is more annoying in python than helpful.

#+BEGIN_SRC emacs-lisp
;; (add-hook 'python-mode-hook #'smartparens-strict-mode)
;; (add-hook 'python-mode-hook #'smartparens-mode)
(add-hook 'python-mode-hook #'rainbow-delimiters-mode)
(add-hook 'python-mode-hook #'subword-mode)
#+END_SRC

Set ipython as python shell
#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i")
(setenv "IPY_TEST_SIMPLE_PROMPT" "1")
#+END_SRC

Set sane defaults for the tab width in Python mode. For some reason in
it sometimes does not default to 4.
#+BEGIN_SRC emacs-lisp

(eval-after-load "python" `(progn
  (add-hook 'python-mode-hook #'(lambda ()
    (setq tab-width 4)
    (setq python-indent-offset 4)
    (setq python-indent-guess-indent-offset nil)))))
#+END_SRC


** Clojure

The following contains the settings used for Clojure, a Lisp which
runs on the JVM.

Clojure related settings Enabling CamelCase support for editing
commands(like forward-word, backward-word, etc) in clojure-mode is
quite useful since we often have to deal with Java class and method
names. The built-in Emacs minor mode subword-mode provides such
functionality:
#+BEGIN_SRC emacs-lisp
(add-hook 'clojure-mode-hook #'subword-mode)
#+END_SRC

The use of paredit when editing Clojure (or any other Lisp) code is
highly recommended. It helps ensure the structure of your forms is
not compromised and offers a number of operations that work on code
structure at a higher level than just characters and words. To
enable it for Clojure buffers:
(add-hook 'clojure-mode-hook #'paredit-mode)
smartparens is an excellent (newer) alternative to paredit. Many
Clojure hackers have adopted it recently and you might want to give
it a try as well. To enable smartparens use the following code:
#+BEGIN_SRC
(add-hook 'clojure-mode-hook #'smartparens-strict-mode)
#+END_SRC

RainbowDelimiters is a minor mode which highlights parentheses,
brackets, and braces according to their depth. Each successive
level is highlighted in a different color. This makes it easy to
spot matching delimiters, orient yourself in the code, and tell
which statements are at a given depth. Assuming you've already
installed RainbowDelimiters you can enable it like this:
#+BEGIN_SRC emacs-lisp
(add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

aggressive-indent-mode automatically adjust the indentation of your
code, while you're writing it. Using it together with clojure-mode
is highly recommended. Provided you've already installed
aggressive-indent-mode you can enable it like this:
#+BEGIN_SRC emacs-lisp
(add-hook 'clojure-mode-hook #'aggressive-indent-mode)
#+END_SRC

And finally the same hooks for the CIDER REPL:
#+BEGIN_SRC emacs-lisp
(add-hook 'cider-repl-mode-hook #'aggressive-indent-mode)
(add-hook 'cider-repl-mode-hook #'smartparens-mode)
(add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode)
(add-hook 'cider-repl-mode-hook #'subword-mode)
(eval-after-load "Clojure"
  (require 'smartparens-config)
  )
#+END_SRC


** Nim

Hooks and settings for Nim lang, a sweet

#+BEGIN_SRC emacs-lisp
(add-hook 'nim-mode-hook #'rainbow-delimiters-mode)
(add-hook 'nim-mode-hook #'subword-mode)
(add-hook 'nim-mode-hook #'nimsuggest-mode)
#+END_SRC

** Julia

Add the standard hooks for Julia as well, a JIT compiled language,
which strifes for success in the scientific community.
#+BEGIN_SRC emacs-lisp
(add-hook 'julia-mode-hook #'rainbow-delimiters-mode)
(add-hook 'julia-mode-hook #'subword-mode)
#+END_SRC

